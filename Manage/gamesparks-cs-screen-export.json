{"screens":{"Players":{"shortCode":"Players","name":"Players","html":"<gs-row>\n    <gs-title-block title=\"Player Search\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"player_search\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>\n\n<gs-row>\n    <gs-placeholder id=\"player__results\"></gs-placeholder>\n</gs-row>","allowedGroups":""}},"snippets":{"player_abtests":{"template":"<gs-form snippet=\"player_abtests?action=submit&playerId={{info.playerId}}\" target=\"abtests__{{info.playerId}}\">\n\n    <gs-title-block title=\"A/B Tests\" padding=\"5\" height=\"250\">\n        \n        <gs-row>\n            <gs-col width=\"3\">\n                Current\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{info.CurrentPlayerABTest}}\" type=\"text\" required name=\"playerABTest\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            \n            <gs-col width=\"3\">\n                Set A/B Test:\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <select name=\"abTest\" required>\n                    {{#each info.ABTests}}\n                    <option value=\"{{this}}\">{{this}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Submit</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        {{#if info.submitSuccess}}\n        <gs-row>\n            <gs-col width=\"12\">\n                <gs-alert type=\"success\" message=\"Success!\"></gs-alert>\n            </gs-col>\n        </gs-row>\n        {{/if}}\n        \n    </gs-title-block>\n\n</gs-form>","script":"require(\"PlayerDataUtilities\");\n\nSpark.setScriptData(\"info\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    form.playerId = playerId;\n    \n    switch (data.action) {\n        case \"view\":\n            return view(data, player);\n        case \"submit\":\n            return submit(data, player);\n    }\n    \n    function view(data, player) {\n        var cursor = Spark.metaCollection(\"ABTests\").find(\n        {\n            // All entries\n        }, \n        {\n            // Return\n            Name: true,\n            Cohorts: true\n        });\n        \n        var abTests = [\"None\"];\n        while (cursor.hasNext()) {\n            var entry = cursor.next();\n            for (var cohort in entry.Cohorts) {\n                abTests.push(FormatString(\"{0} : {1}\", entry.Name, cohort));\n            }\n        }\n        form.ABTests = abTests;\n        \n        abTestName = player.getSegmentValue(\"ABTest\");\n        cohort = player.getSegmentValue(\"Cohort\");\n        if (abTestName === null || abTestName === undefined || \n            cohort === null || cohort === undefined) {\n                \n            form.CurrentPlayerABTest = \"None\";\n        }\n        else {\n            form.CurrentPlayerABTest = FormatString(\"{0} : {1}\", abTestName, cohort);\n        }\n        \n        return form;\n    }\n    \n    function submit(data, player) {\n        var testAndCohortStr = data.abTest;\n        if (testAndCohortStr === \"None\") {\n            player.setSegmentValue(\"ABTest\", null);\n            player.setSegmentValue(\"Cohort\", null);\n        }\n        else {\n            var split = testAndCohortStr.split(\":\");\n            if (split.length !== 2) {\n                return form;\n            }\n            var abTestName = split[0].trim();\n            var cohort = split[1].trim();\n            \n            player.setSegmentValue(\"ABTest\", abTestName);\n            player.setSegmentValue(\"Cohort\", cohort);\n        }\n        \n        form.submitSuccess = true;\n        \n        return view(data, player);\n    }\n}","shortCode":"player_abtests","name":"player_abtests","allowedGroups":""},"player_achievements":{"template":"<gs-title-block title=\"Achievements\" padding=\"5\" height=\"250\">\n    <gs-form snippet=\"player_achievements?action=update&playerId={{form.playerId}}\" target=\"achievements__{{form.playerId}}\">\n        \n        <gs-row>\n            <b>\n            <gs-col width=\"10\" align=\"left\">Earned</gs-col>\n            </b>\n        </gs-row>\n        \n        {{#each form.earnedAchievements}}\n            <gs-row>\n                <gs-col width=\"10\" align=\"left\">{{name}}</gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"player_achievements?action=update&deleteShortCode={{shortCode}}&playerId={{../form.playerId}}\" target=\"achievements__{{../form.playerId}}\">\n                        <i class=\"icon-trash\"/>\n                    </gs-link>\n                </gs-col>\n            </gs-row>\n            <hr/>\n        {{/each}}\n        \n        <br/>\n        {{#if form.unearnedAchievements.length}}\n            <gs-row>\n                <b>\n                <gs-col width=\"10\" align=\"left\">Unearned</gs-col>\n                </b>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"10\">\n                    <select name=\"unearnedAchievements\" class=\"input-block-level\">\n                        {{#each form.unearnedAchievements }}\n                            <option value={{shortCode}}>{{name}}</option>\n                        {{/each}}\n                    </select> \n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-submit>\n                        <i class=\"icon-plus\"></i>\n                    </gs-submit>\n                </gs-col>\n            </gs-row>\n        {{else}}\n            <gs-row>\n                <b>\n                <gs-col width=\"10\">All Achievements Earned</gs-col>\n                </b>\n            </gs-row>\n        {{/if}}\n\n    </gs-form>\n    \n    {{#if form.updated}}\n        <gs-snippet snippet=\"player_currencies?action=view&playerId={{form.playerId}}\" target=\"currencies__{{form.playerId}}\"></gs-snippet>\n        <gs-snippet snippet=\"player_virtual_goods?action=view&playerId={{form.playerId}}\" target=\"virtual__goods__{{form.playerId}}\"></gs-snippet>\n    {{/if}}\n    \n</gs-title-block>","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        // list achievements for the player\n        var listAchievementsRequest = new SparkRequests.ListAchievementsRequest();\n\n        var response = Spark.sendRequestAs(listAchievementsRequest, playerId);\n        var earnedAchievements = [];\n        var unearnedAchievements = [];\n        \n        for(var i in response.achievements){\n            \n            var achievement = response.achievements[i];\n            \n            // if the player has this achievement add it to the earnedAchievements list\n            if(achievement.earned == true){\n                earnedAchievements.push({name: achievement.name, shortCode: achievement.shortCode});\n                // else add it to the unearnedAchievements list\n            } else{\n                unearnedAchievements.push({name: achievement.name, shortCode: achievement.shortCode});\n            }\n        }\n        \n        // add the achievements to the form\n        form.earnedAchievements = earnedAchievements;\n        form.unearnedAchievements = unearnedAchievements;\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // get the achievement to add or remove\n        var addAchievement = data.unearnedAchievements;\n        var removeAchievement =data.deleteShortCode;\n        \n        // add the achievement\n        if(addAchievement != null){\n            player.addAchievement(addAchievement);\n        }\n        \n        // remove the achievement\n        if(removeAchievement != null){\n            player.removeAchievement(removeAchievement);\n        }\n        \n        // flag the form as updated\n        form.updated = true;\n    }\n}","shortCode":"player_achievements","name":"player_achievements","allowedGroups":""},"player_cars":{"template":"<style>\n    .myTooltip {\n        position: relative;\n        display: inline-block;\n        border-bottom: 1px dotted white;\n        line-height: 75%;\n    }\n    \n    .myTooltip .tooltipText {\n        visibility: hidden;\n        background-color: black;\n        color: #ffffff;\n        \n        width: 250px;\n        text-align: center;\n        position: absolute;\n        line-height: 150%;\n        z-index: 1;\n        top: -5px;\n        left: 25px;\n        padding: 2px 20px;\n        border-radius: 5px;\n        \n        white-space: pre-line;\n        word-break: normal\n    }\n    \n    .myTooltip:hover .tooltipText {\n        visibility: visible;\n    }\n\n    .tightText {\n        line-height: 130%;\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    \n    input[type=number] {\n        height: 30px;\n        padding: 2px 2px;\n        align: center\n    }\n    \n    input#brakesField {\n        background-color: #eeeeff;\n        border-color: #aaaaff;\n    }\n    \n    input#weightField {\n        background-color: #ffffee;\n        border-color: #ffffaa;\n    }\n    \n    input#handlingField {\n        background-color: #eeffee;\n        border-color: #aaffaa;\n    }\n    \n    input#powerField {\n        background-color: #ffeeee;\n        border-color: #ffaaaa;\n    }\n    \n    .spacedWords {\n        word-spacing: 18px;\n    }\n    \n    .rightDottedBorder {\n        border-right: 1px dotted black;\n    }\n    .bottomSolidBorder {\n        border-bottom: 1px solid black;\n    }\n    .bottomDottedBorder {\n        border-bottom: 1px dotted black;\n    }\n</style>\n\n<!-- Handlebars extension courtesy of: https://funkjedi.com/technology/412-every-nth-item-in-handlebars/ -->\n<!-- (I had no idea you could do this; this is epic) -->\n<script>\n    Handlebars.registerHelper('grouped_each', function(every, context, options) {\n        var out = \"\", subcontext = [], i;\n        if (context && context.length > 0) {\n            for (i = 0; i < context.length; i++) {\n                if (i > 0 && i % every === 0) {\n                    out += options.fn(subcontext);\n                    subcontext = [];\n                }\n                subcontext.push(context[i]);\n            }\n            out += options.fn(subcontext);\n        }\n        return out;\n    });\n</script>\n\n{{#compare data.queryInfo.screen \"===\" \"cars\"}}\n<gs-form snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}&action=update\" target=\"cars__{{data.queryInfo.playerId}}\">\n    <gs-title-block title=\"Cars\" padding=\"5\" height=\"359\">\n        <gs-row>\n            <gs-col width=\"4\" align=\"left\">\n                {{#compare data.queryInfo.carAndBlueprintCount \">\" 0}}\n                <!-- Here's a checkbox to enable deleting cuz ya can't disable GameSpacks' shitty submit\n                     buttons! ARGH, WHY?! -->\n                <input type=\"checkbox\" name=\"DeleteAllowed\" style=\"margin-bottom: 6px;\"> &nbsp;Allow Deletions\n                {{#if data.queryInfo.deleteIgnored}}\n                << Hey! Tick this next time!\n                {{/if}}\n                {{/compare}}\n            </gs-col>\n            <gs-col width=\"4\" align=\"centre\">\n                {{#compare data.queryInfo.carAndBlueprintCount \"==\" 0}}\n                <b>Player has no cars or blueprints!</b>\n                {{else}}\n                <gs-submit snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{#math data.queryInfo.page \"-\" 1}}{{/math}}&action=view\" target=\"cars__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-chevron-left\"></i>\n                </gs-submit>\n                &nbsp;&nbsp;&nbsp;\n                <b>Page {{data.queryInfo.page}}/{{data.queryInfo.maxPages}}</b> - Showing <b>{{data.queryInfo.startRange}} - {{data.queryInfo.endRange}}</b> of <b>{{data.queryInfo.carAndBlueprintCount}}</b>\n                &nbsp;&nbsp;&nbsp;\n                <gs-submit snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{#math data.queryInfo.page \"+\" 1}}{{/math}}&action=view\" target=\"cars__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-chevron-right\"></i>\n                </gs-submit>\n                {{/compare}}\n            </gs-col>\n            <gs-col width=\"4\" align=\"right\">\n                {{#compare data.queryInfo.carAndBlueprintCount \">\" 0}}\n                {{#if data.queryInfo.updateSuccess}}\n                    Saved!&nbsp;\n                {{/if}}\n                <gs-submit>\n                    <i class=\"icon-save\"></i>\n                </gs-submit>\n                {{/compare}}\n                <gs-submit snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}&action=newCarScreen\" target=\"cars__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-plus\"></i>\n                </gs-submit>\n                <gs-submit snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}&action=view\" target=\"cars__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-refresh\"></i>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n        <br>\n        \n        {{#compare data.queryInfo.carAndBlueprintCount \">\" 0}}\n        <div class=\"bottomSolidBorder\">\n            <gs-row>\n                <b>\n                    <gs-col width=\"4\">\n                        Car Details\n                    </gs-col>\n                    <gs-col width=\"8\">\n                        Stats\n                    </gs-col>\n                </b>\n            </gs-row>\n        </div>\n        {{#each data.carsAndBlueprints}}\n        <!-- This array is a concatenation of the cars and blueprints arrays to avoid overly brainfucky maths and\n             nasty Handlebars. So, first we need to figure out if this item is a car or a blueprint. -->\n        {{#compare this.CarVariant \"===\" null}}\n        <!-- This item is an owned car. -->\n        <gs-row>\n            <gs-col width=\"4\">\n                {{#compare this.Status.PercentageOwned \"===\" 100}}\n                <div class=\"tightText\">\n                    {{this.CarVariantID}}<br>\n                    <div style=\"color:grey\">Owned Car</div>\n                </div>\n                {{else}}\n                <div class=\"tightText\" style=\"color:#ffffbb\">\n                    {{this.CarVariantID}}<br>\n                    <div style=\"color:grey\">{{this.Status.PercentageOwned}}% Owned Car</div>\n                </div>\n                {{/compare}}\n            </gs-col>\n            <gs-col width=\"8\">\n                <gs-row>\n                    <gs-col width=\"1\">\n                        Own. %\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Durability\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <div class=\"tightText\">\n                            Brakes<br>\n                            <div class=\"spacedWords\">Stage Level</div>\n                        </div>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <div class=\"tightText\">\n                            Weight<br>\n                            <div class=\"spacedWords\">Stage Level</div>\n                        </div>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <div class=\"tightText\">\n                            Handling<br>\n                            <div class=\"spacedWords\">Stage Level</div>\n                        </div>\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <div class=\"tightText\">\n                            Power<br>\n                            <div class=\"spacedWords\">Stage Level</div>\n                        </div>\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <p class=\"myTooltip\">Pack\n                            <span class=\"tooltipText\" style=\"left:-145px;width:140px\">0: Base Pack.\n                                1: Pro Pack.\n                                2: Handling Pack.\n                                3: Power Pack.\n                            </span>\n                        </p>\n                    </gs-col>\n                </gs-row>\n                \n                <gs-row>\n                    <!-- The names of these fields need to follow this pattern: FieldName|CarVariantID|CarID. This\n                         is because a form can't pass JSON back to Javascript.-->\n                    <gs-col width=\"1\">\n                        <input style=\"width:3em\" name=\"Car|PercentageOwned|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.PercentageOwned}} min=\"0\" max=\"100\" step=\"10\">\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input style=\"width:3em\" name=\"Car|Durability|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.Durability}} min=\"0\" max={{this.Status.MaxDurability}}>\n                        /{{this.Status.MaxDurability}}\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"brakesField\" style=\"width:2em\" name=\"Car|BrakesUpgradeStage|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.BrakingStage}} min=\"1\" max=\"3\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"brakesField\" style=\"width:2em\" name=\"Car|BrakesUpgradeLevel|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.BrakingLevel}} min=\"0\" max=\"2\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"weightField\" style=\"width:2em\" name=\"Car|WeightUpgradeStage|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.WeightStage}} min=\"1\" max=\"3\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"weightField\" style=\"width:2em\" name=\"Car|WeightUpgradeLevel|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.WeightLevel}} min=\"0\" max=\"2\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"handlingField\" style=\"width:2em\" name=\"Car|HandlingUpgradeStage|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.HandlingStage}} min=\"1\" max=\"3\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"handlingField\" style=\"width:2em\" name=\"Car|HandlingUpgradeLevel|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.HandlingLevel}} min=\"0\" max=\"2\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"powerField\" style=\"width:2em\" name=\"Car|PowerUpgradeStage|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.PowerStage}} min=\"1\" max=\"3\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input id=\"powerField\" style=\"width:2em\" name=\"Car|PowerUpgradeLevel|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.PowerLevel}} min=\"0\" max=\"2\">\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        <input style=\"width:2em\" name=\"Car|PackFitted|{{this.CarVariantID}}|{{this.CarID}}\" type=\"number\" value={{this.Status.CarUpgradeStatus.PackFitted}} min=\"0\" max=\"3\">\n                    </gs-col>\n                </gs-row>\n            </gs-col>\n        </gs-row>\n        <gs-row>\n            <gs-col width=\"4\" align=\"left\">\n                <div style=\"margin-bottom:5px\">\n                    <gs-submit snippet=\"player_cars?playerId={{../../data.queryInfo.playerId}}&page={{../../data.queryInfo.page}}&action=removeCar&variant={{this.CarVariantID}}&carId={{this.CarID}}\" target=\"cars__{{../../data.queryInfo.playerId}}\">\n                        <i class=\"icon-trash\" style=\"color:#ff0000\"></i>\n                    </gs-submit>\n                </div>\n            </gs-col>\n        </gs-row>\n        \n        {{else}}\n        <!-- This item is a Blueprint. -->\n        <gs-row>\n            <gs-col width=\"4\">\n                <div class=\"tightText\" style=\"color:#ccccff\">\n                    {{this.CarVariant.CarVariantID}}<br>\n                    <div style=\"color:grey\">Blueprint - {{this.Pieces}}/{{this.PiecesRequired}} Pieces</div>\n                </div>\n            </gs-col>\n            <gs-col width=\"8\">\n                <gs-row>\n                    <gs-col width=\"2\">\n                        Pieces Earned\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        Times Won\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"2\">\n                        <input style=\"width:3em\" name=\"Blueprint|PiecesEarned|{{this.CarVariant.CarVariantID}}\" type=\"number\" value={{this.Pieces}} min=\"0\" max={{this.PiecesRequired}}> /{{this.PiecesRequired}}\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input disabled style=\"width:3em\" name=\"Blueprint|TimesWon|{{this.CarVariant.CarVariantID}}\" type=\"number\" value={{this.TimesWon}}>\n                    </gs-col>\n                </gs-row>\n            </gs-col>\n        </gs-row>\n        \n        {{/compare}}\n        <div class=\"bottomDottedBorder\"></div>\n        {{/each}}\n        {{else}}\n        <gs-row>\n            <gs-col align=\"centre\">\n            <h4>¯\\(°_°)/¯</h4>\n            </gs-col>\n        </gs-row>\n        {{/compare}}\n    </gs-title-block>\n</gs-form>\n{{else}} {{#compare data.queryInfo.screen \"===\" \"newCarScreen\"}}\n{{#compare data.modelList.length \">\" 1}}\n<gs-form snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}&action=view\" target=\"cars__{{data.queryInfo.playerId}}\">\n    <gs-title-block title=\"Cars > Add New Car\" padding=\"5\" height=\"359\">\n{{else}}\n<gs-form snippet=\"player_cars?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}&action=newCarScreen\" target=\"cars__{{data.queryInfo.playerId}}\">\n    <gs-title-block title=\"Cars > Add New Car > Variant Select\" padding=\"5\" height=\"359\">\n{{/compare}}\n        <gs-row>\n            <gs-col width=\"3\" align=\"left\">\n                <gs-submit>\n                    <i class=\"icon-chevron-left\"></i>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n        {{#each data.modelList}}\n        \n        <gs-row>\n            <gs-col width=\"5\" align=\"left\">\n                <b>{{this._id}}</b> ({{this.count}}) &nbsp;\n                {{#compare this.variants \"===\" null}}\n                <!-- Fuck ME, becuase we're in an #each we have to prepend \"../\" to get anything outside\n                    of the \"this\" scope, god fucking damn it, piece of junk -->\n                <!-- No wait, inside this #compare we've gotta use ../../ for some unknown reason! What the HELL?! -->\n                <gs-submit snippet=\"player_cars?playerId={{../../data.queryInfo.playerId}}&page={{../../data.queryInfo.page}}&action=newCarScreen&model={{this._id}}\" target=\"cars__{{../../data.queryInfo.playerId}}\">Show Variants</gs-submit>\n                {{/compare}}\n            </gs-col>\n        </gs-row>\n       \n        {{#compare this.variants \"!==\" null}}\n        {{#grouped_each 3 this.variants}}\n        <gs-row>\n            {{#each this}}\n            <!-- ARE YOU FUCKING SERIOUS?! -->\n            <gs-col width=\"4\"><gs-submit snippet=\"player_cars?playerId={{../../../../data.queryInfo.playerId}}&page=1&action=addNewCar&variant={{this}}\" target=\"cars__{{../../../../data.queryInfo.playerId}}\">{{this}}</gs-submit></gs-col>\n            {{/each}}\n        </gs-row>\n        {{/grouped_each}}\n        <br>\n        {{/compare}}\n        {{/each}}\n    </gs-title-block>    \n</gs-form>\n{{/compare}}\n{{/compare}}","script":"requireOnce(\"MathUtilities\");\nrequireOnce(\"GeneralUtilities\");\nrequireOnce(\"CarInventoryUtilities\");\nrequireOnce(\"PlayerDataUtilities\");\nrequireOnce(\"VersionedDocumentUtilities2\")\n\nSpark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data) {\n    var hbData = {};\n    \n    var playerId = data.playerId;\n    \n    var playerProfile;\n    var versionedCars;\n    var versionedBlueprints;\n    var cars;\n    var blueprints;\n    \n    var playerProfile;\n    var carsAndBlueprints;\n    \n    var count;\n    var limit = 10;\n    var maxPages;\n    var page;\n    var skip;\n    \n    var updateSuccess = false;\n    var deleteIgnored = false;\n    \n    switch (data.action) {\n        case \"view\":\n            getVersionedCarsAndBlueprints();\n            return view();\n        case \"update\":\n            update(data);\n            getVersionedCarsAndBlueprints();\n            return view();\n        case \"newCarScreen\":\n            getVersionedCarsAndBlueprints();\n            return newCarScreen(data.model);\n        case \"addNewCar\":\n            addNewCar(data.variant);\n            getVersionedCarsAndBlueprints();\n            return view();\n        case \"removeCar\":\n            removeCar(data);\n            getVersionedCarsAndBlueprints();\n            return view();\n    }\n    \n    function getVersionedCarsAndBlueprints() {\n        playerProfile = MakeVersionedProfileDocument(playerId);\n        versionedCars = playerProfile.GetVersionedKey(\"cars\", null);\n        versionedBlueprints = playerProfile.GetVersionedKey(\"blueprints\", null);\n        cars = versionedCars.GetData();\n        blueprints = versionedBlueprints.GetData();\n        \n        if (blueprints === null) {\n            if (cars === null) {\n                carsAndBlueprints = [];\n            }\n            else {\n                carsAndBlueprints = cars;\n            }\n        }\n        else {\n            carsAndBlueprints = cars.concat(blueprints);\n        }\n        \n        count = carsAndBlueprints.length;\n        maxPages = Math.ceil(count / limit);\n        page = Clamp(parseInt(data.page), 1, maxPages);\n        skip = (page - 1) * limit;\n    }\n    \n    function view() {\n        // All we need to do here is put the data together for Handlebars.\n        if (carsAndBlueprints !== null && carsAndBlueprints !== undefined) {\n            hbData.carsAndBlueprints = carsAndBlueprints.slice(skip, Clamp(limit + skip, 0, count))\n        }\n        else {\n            hbData.carsAndBlueprints = [];\n        }\n        \n        hbData.queryInfo = {\n            \"playerId\": playerId,\n            \"carAndBlueprintCount\": count,\n            \"page\": page,\n            \"maxPages\": maxPages,\n            \"startRange\": skip + 1,\n            \"endRange\": Clamp(limit + skip, 0, count),\n            \"updateSuccess\": updateSuccess,\n            \"deleteIgnored\": deleteIgnored,\n            \"screen\": \"cars\"\n        }\n        return hbData;\n    }\n    \n    function update(data) {\n        // Here, we need to get whatever's been thrown at us, then use it to update the cars\n        // and blueprints sections of the player profile.\n        var successfullyWritten = false;\n        var blueprintsToAward;\n        \n        while(!successfullyWritten) {\n            blueprintsToAward = [];\n            getVersionedCarsAndBlueprints();\n    \n            for (var field in data) {\n                // Each field in the form should be a string we can split using | as a delimiter,\n                // and the first substring should be either \"Car\" or \"Blueprint\".\n                var splitField = field.split(\"|\");\n                if (splitField !== null && splitField !== undefined) {\n                    if (splitField[0] === \"Car\") {\n                        // Okay, now we should update the relevant car in the profile.\n                        var fieldType = splitField[1];\n                        var carVariantId = splitField[2];\n                        var carId = parseInt(splitField[3]);\n                        var fieldValue = data[field];\n                        \n                        for (var i = 0; i < cars.length; i++) {\n                            var car = cars[i];\n                            \n                            if (car.CarVariantID === carVariantId && car.CarID === carId) {\n                                switch(fieldType) {\n                                    case \"PercentageOwned\": {\n                                        var newPercentage = parseInt(fieldValue);\n                                        \n                                        // If you drop the Percentage Owned below 100 and the car doesn't have\n                                        // a reserved timestamp, generate one here.\n                                        if (car.Status.PercentageOwned < 100 && newPercentage == 100) {\n                                            car.Timers.GhostCarRemovalTime = 0;\n                                        }\n                                        else if (car.Status.PercentageOwned == 100 && newPercentage < 100) {\n                                            var sevenDays = 60 * 60 * 24 * 7;\n                                            car.Timers.GhostCarRemovalTime = Math.round(Date.now() / 1000) + sevenDays;\n                                        }\n                                        \n                                        car.Status.PercentageOwned = newPercentage;\n                                        break;\n                                    }\n                                    case \"Durability\": {\n                                        car.Status.Durability = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"BrakesUpgradeStage\": {\n                                        car.Status.CarUpgradeStatus.BrakingStage = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"BrakesUpgradeLevel\": {\n                                        car.Status.CarUpgradeStatus.BrakingLevel = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"WeightUpgradeStage\": {\n                                        car.Status.CarUpgradeStatus.WeightStage = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"WeightUpgradeLevel\": {\n                                        car.Status.CarUpgradeStatus.WeightLevel = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"HandlingUpgradeStage\": {\n                                        car.Status.CarUpgradeStatus.HandlingStage = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"HandlingUpgradeLevel\": {\n                                        car.Status.CarUpgradeStatus.HandlingLevel = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"PowerUpgradeStage\": {\n                                        car.Status.CarUpgradeStatus.PowerStage = parseInt(fieldValue);\n                                        break;\n                                    }\n                                    case \"PowerUpgradeLevel\": {\n                                        car.Status.CarUpgradeStatus.PowerLevel = parseInt(fieldValue); // >9000\n                                        break;\n                                    }\n                                    case \"PackFitted\": {\n                                        car.Status.CarUpgradeStatus.PackFitted = parseInt(fieldValue);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (splitField[0] === \"Blueprint\") {\n                        // We should update the blueprint in the profile and possibly award the car, too.\n                        var fieldType = splitField[1];\n                        var carVariantId = splitField[2];\n                        var fieldValue = data[field];\n                        \n                        for (var i = 0; i < blueprints.length; i++) {\n                            var blueprint = blueprints[i];\n                            \n                            if (blueprint.CarVariant.CarVariantID === carVariantId) {\n                                switch(fieldType) {\n                                    case \"PiecesEarned\": {\n                                        if (fieldValue >= blueprint.PiecesRequired) {\n                                            // Award the prize car!\n                                            blueprintsToAward.push(carVariantId);\n                                            blueprint.TimesWon++;\n                                            blueprint.Pieces = parseInt(fieldValue) - blueprint.PiecesRequired;\n                                        }\n                                        else {\n                                            blueprint.Pieces = parseInt(fieldValue);\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Now write back the cars and blueprints to the profile.\n            successfullyWritten = playerProfile.Save();\n        }\n        \n        // Award all the blueprint cars that are now complete.\n        for (var i = 0; i < blueprintsToAward.length; i++) {\n            AddNewCarToInventory(blueprintsToAward[i], playerId, 100, true);\n        }\n        \n        updateSuccess = true;\n    }\n    \n    function newCarScreen(model) {\n        // If a model is passed in, we should gather every Variant of the given model.\n        // If not, we should gather every Model in the car inventory.\n        var modelList = getVariantCountByModel(model);\n        \n        if (model !== null && model !== undefined) {\n            for (var i = 0; i < modelList.length; i++) {\n                var thisModel = modelList[i];\n                if (model === thisModel._id) {\n                    // Grab the Variants.\n                    thisModel.variants = Spark.metaCollection(\"CarInventory\").aggregate(\n                    {\n                        $match: { \"Model\": model }\n                    },\n                    {\n                        $group: {\n                            _id : \"$Model\",\n                            variants: { $push: \"$CarVariantID\" }\n                        }\n                    })[0].variants;\n                    thisModel.variants.sort();\n                    modelList[i] = thisModel;\n                    break;\n                }\n            }\n        }\n        \n        hbData.modelList = modelList;\n        hbData.queryInfo = {\n            \"playerId\": playerId,\n            \"page\": page,\n            \"screen\": \"newCarScreen\"\n        }\n        return hbData;\n    }\n    \n    function addNewCar(variantId) {\n        // Here we just need to call a li'l function:\n        AddNewCarToInventory(variantId, playerId, 100, true);\n        \n        // Oh, and we should force the page to the page we know the new car is on.\n        var totalCars = GetCars(playerId).length;\n        data.page = Math.ceil(totalCars / limit);\n    }\n    \n    function removeCar(data) {\n        // No checky, no deletey!\n        if (data.DeleteAllowed === \"on\") // yes, it's \"on\", not true, shrug\n        {\n            var variantId = data.variant;\n            var carId = parseInt(data.carId);\n            \n            // Find the car that matches the variant ID and car ID.\n            getVersionedCarsAndBlueprints();\n            var slotIndex = -1;\n            for (var i = 0; i < cars.length; i++) {\n                var car = cars[i];\n                \n                if (car.CarVariantID === variantId && car.CarID === carId) {\n                    slotIndex = i;\n                    break;\n                }\n            }\n            \n            if (slotIndex != -1) {\n                DeletePlayerCarAtIndex(slotIndex, playerId);\n            }\n        }\n        else {\n            deleteIgnored = true;\n        }\n    }\n    \n    function getVariantCountByModel(model) {\n        if (model !== null && model !== undefined) {\n            return Spark.metaCollection(\"CarInventory\").aggregate(\n            {\n                $match: {\n                    \"Model\": model\n                }\n            },\n            {\n                $group: {\n                    _id : \"$Model\",\n                    count: { $sum: 1 }\n                }\n            });\n        }\n        else {\n            return Spark.metaCollection(\"CarInventory\").aggregate(\n            {\n                $group: {\n                    _id : \"$Model\",\n                    count: { $sum: 1 }\n                }\n            });\n        }\n    }\n}","shortCode":"player_cars","name":"player_cars","allowedGroups":""},"player_currencies":{"template":"<gs-form snippet=\"player_currencies?action=update&playerId={{currencies.playerId}}\" target=\"currencies__{{currencies.playerId}}\">\n    <gs-title-block title=\"Currencies\" padding=\"5\" height=\"250\">\n        <gs-row>\n            <gs-col width=\"2\">\n                C1\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency1\" type=\"number\" min=\"0\" value=\"{{currencies.currency1}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C2\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency2\" type=\"number\" min=\"0\" value=\"{{currencies.currency2}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/>\n        <gs-row>\n            <gs-col width=\"2\">\n                C3\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency3\" type=\"number\" min=\"0\" value=\"{{currencies.currency3}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C4\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency4\" type=\"number\" min=\"0\" value=\"{{currencies.currency4}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/>        \n        <gs-row>\n            <gs-col width=\"2\">\n                C5\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency5\" type=\"number\" min=\"0\" value=\"{{currencies.currency5}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C6\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency6\" type=\"number\" min=\"0\" value=\"{{currencies.currency6}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/> \n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n                {{#if currencies.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n    </gs-title-block>\n</gs-form>","script":"Spark.setScriptData(\"currencies\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        // get balance for each currency\n        form.currency1 = player.getBalance1();\n        form.currency2 = player.getBalance2();\n        form.currency3 = player.getBalance3();\n        form.currency4 = player.getBalance4();\n        form.currency5 = player.getBalance5();\n        form.currency6 = player.getBalance6();\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // credit or debit ( if getDifference is negative ) the player\n        player.credit1(getDifference(player.getBalance1(), data.currency1));\n        player.credit2(getDifference(player.getBalance2(), data.currency2));\n        player.credit3(getDifference(player.getBalance3(), data.currency3));\n        player.credit4(getDifference(player.getBalance4(), data.currency4));\n        player.credit5(getDifference(player.getBalance5(), data.currency5));\n        player.credit6(getDifference(player.getBalance6(), data.currency6));\n        \n        form.updated = true;   \n    }\n    \n    // gets the difference between current balance and the one to set\n    function getDifference(balance, toSet){\n        \n        var toSetInt = parseInt(toSet);\n        return toSetInt - balance;\n    }\n}","shortCode":"player_currencies","name":"player_currencies","allowedGroups":""},"player_currenciesLevels":{"template":"<gs-form snippet=\"player_currenciesLevels?action=updateAll&playerId={{inventory.playerId}}\" target=\"currencies__{{inventory.playerId}}\">\n    <gs-title-block title=\"Currencies And Level\" padding=\"5\" height=\"250\">\n    \n        <gs-row>\n        \n            <gs-col width=\"2\">\n                Cash\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency1\" type=\"number\" min=\"0\" value=\"{{inventory.currency1}}\"/>\n            </gs-col>\n            \n            <gs-col width=\"2\">\n                Gold\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency2\" type=\"number\" min=\"0\" value=\"{{inventory.currency2}}\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"2\">\n                Level\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency5\" type=\"number\" min=\"0\" value=\"{{inventory.level}}\"/>\n            </gs-col>\n            \n            <gs-col width=\"2\">\n                XP\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency6\" type=\"number\" min=\"0\" value=\"{{inventory.currency6}}\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <br/> \n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        <br/>\n        \n        <gs-row>\n            <gs-col width=\"12\">\n                {{#if inventory.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n            </gs-col>\n        </gs-row>\n        \n    </gs-title-block>\n</gs-form>","script":"Spark.setScriptData(\"inventory\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data) {\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch (data.action) {\n        case \"updateAll\":\n            updateAll(data);\n            return view(data);\n        default:\n            return view(data);\n    }\n    \n    function view(data) {\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        // get balance for each currency\n        form.currency1 = player.getBalance1();\n        form.currency2 = player.getBalance2();\n        //form.currency3 = player.getBalance3();\n        //form.currency4 = player.getBalance4();\n        //form.currency5 = player.getBalance5();\n        form.currency6 = player.getBalance6();\n\n        form.level = player.hasVGood(\"Level\");\n        \n        return form;\n    }\n    \n    function updateAll(data) {\n        \n        try {\n            // credit or debit ( if getDifference is negative ) the player\n            var cashDiff = data.currency1 - player.getBalance1();\n            if (cashDiff > 0) {\n                player.credit1(cashDiff);\n            }\n            else {\n                player.debit1(Math.abs(cashDiff));\n            }\n            \n            var goldDiff = data.currency2 - player.getBalance2();\n            if (goldDiff > 0) {\n                player.credit2(goldDiff);\n            }\n            else {\n                player.debit2(Math.abs(goldDiff));\n            }\n    \n            //player.credit3(getDifference(player.getBalance3(), data.currency3));\n            //player.credit4(getDifference(player.getBalance4(), data.currency4));\n            //player.credit5(getDifference(player.getBalance5(), data.currency5));\n            \n            var xpDiff = data.currency6 - player.getBalance6();\n            if (xpDiff > 0) {\n                player.credit6(xpDiff);\n            }\n            else {\n                player.debit6(Math.abs(xpDiff));\n            }\n            \n            var currentLevel = player.hasVGood(\"Level\");\n            var newLevel = data.level;\n            if (currentLevel < newLevel) {\n                var diff = newLevel - currentLevel;\n                player.addVGood(\"Level\", diff);\n            }\n            else if (currentLevel > newLevel) {\n                var diff = currentLevel - newLevel;\n                player.useVGood(\"Level\", diff);\n            }\n            \n            form.updated = true;   \n        }\n        catch (errorMessage) {\n            form.error = true;\n            form.errorMessage = errorMessage;\n        }\n    }\n}","shortCode":"player_currenciesLevels","name":"player_currenciesLevels","allowedGroups":""},"player_details":{"template":"<gs-form snippet=\"player_details?action=update&playerId={{player.playerId}}\" target=\"details__{{player.playerId}}\">\n    <gs-title-block title=\"Player Details\" padding=\"5\" height=\"250\">\n        {{#if player.isOnline}}\n            <p class=\"alert alert-success\">{{player.displayName}} is online.</p>\n        {{else}}\n            <p class=\"alert alert-error\">{{player.displayName}} is offline.</p>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                ID\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.playerId}}\" type=\"text\" required name=\"playerId\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                User Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.userName}}\" type=\"text\" required name=\"userName\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Display Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.displayName}}\" type=\"text\" required name=\"displayName\"/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Time Registered\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.registrationDate}}\" type=\"text\" name=\"registrationDate\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Last Login\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.lastSeen}}\" type=\"text\" name=\"lastSeen\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        {{#if player.GCID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Game Center ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.GCID}}\" type=\"text\" required name=\"GCID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        \n        {{#if player.GPGID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Google Play Games ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.GPGID}}\" type=\"text\" required name=\"GPGID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        \n        {{#if player.FBID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Bookface ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.FBID}}\" type=\"text\" required name=\"FBID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Hide On Leaderboards\n            </gs-col>\n            <gs-col width=\"8\">\n                <input rel=\"confirm-check\" type=\"checkbox\" name=\"hidden\" id=\"hidden\" class=\"checky\" {{#compare player.isHidden \"==\" true}}checked{{/compare}} />\n    \t\t\t<label for=\"hidden\" class=\"checky\"><span></span></label>\n            </gs-col>\n        </gs-row>\n        <br/>\n        \n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n            {{#if player.updated}}\n                {{#if player.success}}\n                    <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                {{else}}\n                    <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                {{/if}}\n            {{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        <br/>\n        \n        <center><h5>&#9762; Profile Nuke &#9762;</h5></center>\n        <!--GameSparks seemingly ignores the rules of HTML and makes ALL-->\n        <!--text stretch for infinity instead of wrapping it, regardless-->\n        <!--of whether you put it in a gs-col or paragraph with a style-->\n        <!--or whatever.-->\n        <!--AND it looks different than in the editor...-->\n        <center>To reset this user's profile, copy the user's ID into the box as<br/>\n        confirmation, then hit the Nuke Profile button.</center><br/>\n        \n        <gs-row>\n            <gs-col width=\"2\">\n            </gs-col>\n            <gs-col width=\"5\">\n                <input type=\"text\" name=\"nukeConfirmation\"/>\n            </gs-col>\n            <gs-col width=\"3\">\n                <gs-submit snippet=\"player_details?action=nuke&playerId={{player.playerId}}\">\n                    <font color=\"red\"><b>Nuke Profile</b></font>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        {{#if player.nuked}}\n            {{#if player.success}}\n                <gs-alert type=\"success\" message=\"BOOM: {{player.playerId}} was nuked.\"></gs-alert>\n            {{else}}\n                <gs-alert type=\"error\" message=\"{{player.error}}\"></gs-alert>\n            {{/if}}\n        {{/if}}\n\n    </gs-title-block>\n</gs-form>","script":"require(\"PlayerDataUtilities\");\n\nSpark.setScriptData(\"player\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n        case \"nuke\":\n            nuke(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        form.userName = player.getUserName();\n        form.displayName = player.getDisplayName();\n        form.registrationDate = player.getCreationDate().toString();\n        form.isOnline = player.isOnline();\n        form.lastSeen = player.getLastSeen().toString();\n        form.isHidden = player.isHiddenOnLeaderboards();\n        \n        \n        // Game Center ID\n        if (player.getExternalIds().GC != null) {\n            form.GCID = player.getExternalIds().GC;\n        }\n        \n        // Google Play Games ID\n        if (player.getExternalIds().GP != null) {\n            form.GPGID = player.getExternalIds().GP;\n        }\n        \n        // Facebook ID\n        if (player.getExternalIds().FB != null) {\n            form.FBID = player.getExternalIds().FB;\n        }\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        //create a ChangeUserDetails request\n        var changeUserDetailsRequest = new SparkRequests.ChangeUserDetailsRequest();\n        \n        var newUserName = data.userName;\n        var newDisplayName = data.displayName;\n        var hidden = data.hidden;\n        \n        // check that old username doesn't match the new one\n        if(player.getUserName() != newUserName){\n        changeUserDetailsRequest.userName = newUserName;\n        }\n        \n        changeUserDetailsRequest.displayName = newDisplayName;\n        \n        var response = Spark.sendRequestAs(changeUserDetailsRequest, playerId);\n        \n        // if ChangeUserDetails response contained an error\n        if(response.error != null){\n            form.error = JSON.stringify(response.error);\n        } else{\n            // set leaderboard visibility for the player\n            if(hidden == \"on\"){\n                player.hideOnLeaderboards();\n            } else{\n                player.showOnLeaderboards();\n            }\n            \n            form.success = true;\n        }\n        \n        form.updated = true;   \n    }\n    \n    function nuke(data){\n        // Compare the user ID with what was entered into the nuke box.\n        if (data.playerId === data.nukeConfirmation)\n        {\n            NukePlayerProfile(data.playerId);\n            form.success = true;\n        }\n        else\n        {\n            form.success = false;\n            form.error = \"The text in the nuke box doesn't match the user's ID.\"\n        }\n        \n        form.nuked = true;\n    }\n}","shortCode":"player_details","name":"player_details","allowedGroups":""},"player_event_data":{"template":"<style>\n    .myTooltip {\n        position: relative;\n        display: inline-block;\n        border-bottom: 1px dotted white;\n        line-height: 75%;\n    }\n    \n    .myTooltip .tooltipText {\n        visibility: hidden;\n        background-color: black;\n        color: #ffffff;\n        \n        width: 250px;\n        text-align: center;\n        position: absolute;\n        line-height: 150%;\n        z-index: 1;\n        top: -5px;\n        left: 25px;\n        padding: 2px 20px;\n        border-radius: 5px;\n        \n        white-space: pre-line;\n        word-break: normal\n    }\n    \n    .myTooltip:hover .tooltipText {\n        visibility: visible;\n    }\n    \n    .challengeInfoDiv {\n        line-height: 130%;\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    \n    .prizeListDiv {\n        white-space: normal;\n        word-break: break-word;\n    }\n    \n    .bottomSolidBorder {\n        border-bottom: 1px solid black;\n    }\n    .bottomDottedBorder {\n        border-bottom: 1px dotted black;\n    }\n</style>\n\n<gs-form snippet=\"player_event_data?playerId={{data.queryInfo.playerId}}&page={{data.queryInfo.page}}\" target=\"eventData__{{data.queryInfo.playerId}}\">\n    <gs-title-block title=\"Event Data\" padding=\"5\" height=\"359\">\n        <gs-row>\n            <gs-col width=\"1\" align=\"left\">\n            </gs-col>\n            <gs-col width=\"10\" align=\"centre\">\n                {{#compare data.queryInfo.count \"==\" 0}}\n                <b>Player has no challenges on record!</b>\n                {{else}}\n                <gs-submit snippet=\"player_event_data?playerId={{data.queryInfo.playerId}}&page={{#math data.queryInfo.page \"-\" 1}}{{/math}}\" target=\"eventData__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-chevron-left\"></i>\n                </gs-submit>\n                &nbsp;&nbsp;&nbsp; <!-- padding in CSS isn't working so I have to do this, ew ew ew -->\n                <b>Page {{data.queryInfo.page}}/{{data.queryInfo.maxPages}}</b> - Showing <b>{{data.queryInfo.startRange}} - {{data.queryInfo.endRange}}</b> of <b>{{data.queryInfo.count}}</b>\n                &nbsp;&nbsp;&nbsp; <!-- urgh agh ehh -->\n                <gs-submit snippet=\"player_event_data?playerId={{data.queryInfo.playerId}}&page={{#math data.queryInfo.page \"+\" 1}}{{/math}}\" target=\"eventData__{{data.queryInfo.playerId}}\">\n                    <i class=\"icon-chevron-right\"></i>\n                </gs-submit>\n                {{/compare}}\n            </gs-col>\n            <gs-col width=\"1\" align=\"right\">\n                <gs-submit>\n                    <i class=\"icon-refresh\"></i>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n        <br>\n        {{#compare data.queryInfo.count \">\" 0}}\n        <div class=\"bottomSolidBorder\">\n            <gs-row>\n                <b>\n                    <gs-col width=\"3\">\n                        Event Name\n                    </gs-col>\n                    <gs-col width=\"3\">\n                        Challenge Info\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        Rank\n                    </gs-col>\n                    <gs-col width=\"1\">\n                        Score\n                    </gs-col>\n                    <gs-col width=\"4\">\n                        Prizes\n                    </gs-col>\n                </b>\n            </gs-row>\n        </div>\n        {{#each data.events}}\n        <gs-row>\n            <!-- \"Event Name\" column -->\n            <gs-col width=\"3\">\n                <div class=\"challengeInfoDiv\">\n                    {{this.eventName}}<br>\n                    <div style=\"color:grey\">Ends: {{this.endDate}}</div>\n                </div>\n            </gs-col>\n            \n            <!-- \"Challenge Info\" column -->\n            <gs-col width=\"3\">\n                <div class=\"challengeInfoDiv\">\n                    {{#compare this.insaneChallengeExplanation \"!=\" \"\"}}\n                    <div class=\"myTooltip\">{{this.challengeId}}\n                        <span class=\"tooltipText\" style=\"left:14em\">{{this.insaneChallengeExplanation}}</span>\n                    </div><br>\n                {{else}}\n                {{this.challengeId}}<br>\n                {{/compare}}\n                {{this.state}}\n                </div>\n            </gs-col>\n            \n            <!-- \"Rank\" column -->\n            <gs-col width=\"1\">\n                <gs-row>\n                    {{#compare this.rank \"==\" \"N/A\"}}\n                     <p class=\"myTooltip\">N/A\n                        <span class=\"tooltipText\">{{this.unavailableRankExplanation}}</span>\n                    </p>\n                    {{else}}\n                    {{this.rank}}/{{this.totalChallengers}}\n                    {{/compare}}\n                </gs-row>\n            </gs-col>\n            \n            <!-- \"Score\" column -->\n            <gs-col width=\"1\">\n                <gs-row>\n                    {{#compare this.score \"==\" \"N/A\"}}\n                    <p class=\"myTooltip\">N/A\n                        <span class=\"tooltipText\">{{this.unavailableScoreExplanation}}</span>\n                    </p>\n                    {{else}}\n                    {{this.score}}\n                    {{/compare}}\n                    \n                </gs-row>\n            </gs-col>\n            \n            <!-- \"Prizes Awarded\" column -->\n            <gs-col width=\"4\">\n                <!-- HTML is so great -->\n                <div class=\"prizeListDiv\">\n                    {{#each this.prizes}}\n                    {{#compare this.state \"===\" \"Unawarded\"}}\n                    <p style=\"color:red; margin:5px\">{{this.prize}}</p>\n                    {{else}} {{#compare this.state \"===\" \"Unclaimed\"}} <!-- No else if, gj Handlebars -->\n                    <p style=\"color:yellow; margin:5px\">{{this.prize}}</p>\n                    {{else}} {{#compare this.state \"===\" \"Awarded\"}}\n                    <p style=\"color:lime; margin:5px\">{{this.prize}}</p>\n                    {{else}}\n                    <p style=\"margin:5px\">{{this.prize}}</p>\n                    {{/compare}}\n                    {{/compare}}\n                    {{/compare}} <!-- Mmmm -->\n                    {{/each}}\n                </div>\n            </gs-col>\n        </gs-row>\n        <div class=\"bottomDottedBorder\"></div>\n        {{/each}}\n        {{else}}\n        <gs-row>\n            <gs-col align=\"centre\">\n            <b>¯\\(°_°)/¯</b>\n            </gs-col>\n        </gs-row>\n        {{/compare}}\n    </gs-title-block>\n</gs-form>","script":"require(\"MathUtilities\");\nrequire(\"GeneralUtilities\");\n\nSpark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data) {\n    var playerId = data.playerId;\n    var count = Spark.systemCollection(\"challengeInstance\").find(\n    {\n        \"accepted\": playerId, \"challengeName\": { $not: {$eq: \"FTUE Opponent Race\"} }\n    }).count();\n    var limit = 10;\n    var maxPages = Math.ceil(count / limit);\n    var page = Clamp(parseInt(data.page), 1, maxPages); // parseInt, cuz HTML is cool and doesn't need numbers\n    var skip = (page - 1) * limit;\n    \n    var hbEventData = {};\n    var playerProfile = Spark.runtimeCollection(\"PlayerProfile\").findOne(\n    {\n        \"_id\": { \"$oid\": playerId }\n    },\n    {\n        \"_id\": 0\n    });\n    \n    function GetTempScoreForChallenge(challengeId, playerId) {\n        var tempScores = playerProfile.tempScores;\n        if (tempScores !== null && tempScores !== undefined) {\n            for (var i = 0; i < tempScores.length; ++i) {\n                for (var key in tempScores[i]) {\n                    if (key === challengeId) {\n                        var score = tempScores[i][key];\n                        if (score === null || score === undefined) {\n                            return 0;\n                        }\n                        else if (isNaN(score)) {\n                            Spark.getLog.error(FormatString(\"PlayerDataUtilities.GetTempScoreForChallenge() tempScore for {0} is NaN\", key));\n                            return 0;\n                        }\n                        else {\n                            return score;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    \n    function PrizeToShortString(prize) {\n        if (prize !== null && prize !== undefined) {\n            if (prize.PrizeType === \"Car\") {\n                return prizeString = FormatString(\"{0}: {1}\", prize.PrizeType, prize.PrizeValue);\n            }\n            else if (prize.PrizeType === \"Blueprint\") {\n                return prizeString = FormatString(\"{0}x {1}: {2}\", prize.BlueprintOrProPackCount, prize.PrizeType, prize.PrizeValue);\n            }\n            else if (prize.PrizeType === \"ProPack\") {\n                return FormatString(\"{0}x Class {1} {2}: {3}\", prize.BlueprintOrProPackCount, prize.PrizeClass, prize.PrizeType, prize.PrizeValue);\n            }\n            else {\n                return FormatString(\"{0} {1}\", SeparateThousands(prize.PrizeValue), prize.PrizeType);\n            }\n        }\n    }\n    \n    // When players win prizes for an event, the event data is deleted from their profile after they\n    // collect their prizes. So I know what prizes they won, but not what events they entered.\n    // Well... since that data's volatile, let's query challenges instead.\n    // First, get the challenges the player accepted.\n    var acceptedChallengesCursor = Spark.systemCollection(\"challengeInstance\").find(\n        {\n            \"accepted\": playerId, \"challengeName\": { $not: {$eq: \"FTUE Opponent Race\"} }\n        }).sort({\"endDate\": -1}).limit(limit).skip(skip);\n    \n    // Now we need to go through each challenge. Grab the challenge ID and the challenge state.\n    var enteredEvents = [];\n    while (acceptedChallengesCursor.hasNext()) {\n        var challenge = acceptedChallengesCursor.next();\n\n        var challengeId = challenge._id.$oid;\n        var challengeState = challenge.state;\n        var totalChallengers = challenge.accepted.length;\n        \n        var unavailableRankExplanation = \"\";\n        var unavailableScoreExplanation = \"\";\n        var insaneChallengeExplanation = \"\";\n        \n        // Sanity checking the challenge, part 1. Bit out of the scope of this tool, but I've seen\n        // challenges in some really weird states and I don't like it.\n        if (challenge.accepted.length != 1 && challenge.accepted.length != challenge.challenged.length) {\n            // This one might be nothing to worry about if the number of people in \"challenged\" is one less\n            // than the number of people in \"accepted\", as long as the original challenger is NOT in the\n            // \"challenged\" list.\n            var challenged = challenge.challenged.length;\n            var accepted = challenge.accepted.length;\n            var problem = false;\n            if (challenge.challenged.indexOf(challenge.challenger, 0) === -1) {\n                if ((accepted !== challenged + 1)) {\n                    problem = true;\n                }\n            }\n            else {\n                problem = true;\n            }\n            \n            if (problem) {\n                insaneChallengeExplanation += FormatString(\"- The 'challenged' and 'accepted' arrays of this challenge don't contain the same number of players! ({0} challenged, {1} accepted)\\n\", challenge.challenged.length, challenge.accepted.length);\n            }\n        }\n        \n        if (challenge.accepted.indexOf(playerId, 0) == -1) {\n            insaneChallengeExplanation += \"- This player isn't in the accepted array of this challenge!\\n\";\n        }\n        \n        if (challenge.accepted.indexOf(challenge.challenger, 0) == -1) {\n            insaneChallengeExplanation += \"- This challenge's original challenger isn't in the accepted array!\\n\";\n        }\n        \n        // Now we can grab data from the leaderboard.\n        // If the leaderboard state is \"ISSUED\" or \"EXPIRED\", then the player is the only one in the\n        // leaderboard, and the leaderboard won't exist.\n        var playerRank = \"N/A\";\n        var score = \"N/A\";\n        if (challengeState === \"ISSUED\" || challengeState === \"EXPIRED\") {\n            // This player's the only one in the leaderboard!\n            playerRank = 1;\n            \n            // Of course, we can't get the player's score from the leaderboard if they're the only one in\n            // there (cuz the leaderboard doesn't exist, thx GameSpacks), so we need to grab that data from\n            // their player profile; it's stored in tempScores.\n            // However, if they've claimed their prizes when they were the only person in the leaderboard,\n            // we have literally no way of getting their score. Epic.\n            score = GetTempScoreForChallenge(challengeId, playerId)\n            if (score !== null && score !== undefined) {\n                score = \"$\" + SeparateThousands(score);\n            }\n            else {\n                score = \"N/A\";\n                unavailableScoreExplanation = \"This player was the only one in their leaderboard, and their profile contains no data about their score for this challenge.\";\n            }\n        }\n        else {\n            // What the fuck! Sometimes SparkLeaderboards.getChallengeLeaderboard returns null when the\n            // leaderboard DEFINITELY exists! I'd look in the collection directly, but I can't access it\n            // in code! So there's nothing I can do about it! ARRRGH!\n            var challengeLeaderboard = Spark.getLeaderboards().getChallengeLeaderboard(challengeId);\n            \n            if (challengeLeaderboard !== null && challengeLeaderboard !== undefined) {\n                var playerEntries = challengeLeaderboard.getEntriesFromPlayer(playerId, 1);\n                if (playerEntries.hasNext()) {\n                    var playerLeaderboardEntry = playerEntries.next();\n                    playerRank = playerLeaderboardEntry.getRank();\n                    score = \"$\" + SeparateThousands(playerLeaderboardEntry.getAttribute(\"score\"));\n                }\n                else {\n                    unavailableRankExplanation = \"Somehow, this player doesn't have any entries in the challenge leaderboard!\";\n                    unavailableScoreExplanation = \"Somehow, this player doesn't have any entries in the challenge leaderboard!\";\n                }\n            }\n            else {\n                playerRank = \"N/A\";\n                unavailableRankExplanation = \"GameSparks claims this challenge leaderboard no longer exists, so we have no way of getting the player's rank.\";\n                unavailableScoreExplanation = \"GameSparks claims this challenge leaderboard no longer exists, so we have no way of getting the player's final score.\";\n            }\n            \n            // Sanity checking the challenge, part 2.\n            if (challengeLeaderboard != null && challengeLeaderboard.getEntryCount() != challenge.accepted.length) {\n                insaneChallengeExplanation += FormatString(\"- {0} players accepted this challenge, but there are {1} players in the leaderboard!\\n\", challenge.accepted.length, challengeLeaderboard.getEntryCount());\n            }\n        }\n        \n        // If the challenge is finished and the player has a valid rank, we can use that along\n        // with the event name to figure out what prizes they *should* have earned.\n        var onlyShowAwardedPrizes = false;\n        var prizes = [];\n        if (challengeState === \"EXPIRED\" || challengeState === \"COMPLETE\") {\n            if (playerRank !== \"N/A\") {\n                var raceEvent = Spark.metaCollection(\"raceEvents\").findOne(\n                {\n                    \"EventName\": challenge.challengeName\n                }, \n                {\n                    \"TopPrizes\": 1, \"_id\": 0\n                });\n                \n                if (raceEvent !== null && raceEvent !== undefined) {\n                    var eventPrizeData = raceEvent.TopPrizes;\n                    \n                    for (var iPrizeBands = 0; iPrizeBands < eventPrizeData.length; ++iPrizeBands) {\n                        var prizeBand = eventPrizeData[iPrizeBands];\n                        \n                        // Grab the first band that we beat the rank of (if any).\n                        if (playerRank <= parseInt(prizeBand.GoalTarget)) {\n                            for (var iPrizes = 0; iPrizes < prizeBand.Prizes.length; ++iPrizes) {\n                                var prize = prizeBand.Prizes[iPrizes];\n                                prizes.push({\"prize\": PrizeToShortString(prize), \"state\": \"Unawarded\"});\n                            }\n                            break;\n                        }\n                    }\n                }\n                else {\n                    // The event associated with this challenge no longer exists?!\n                    //prizes.push({\"prize\": \"Event no longer exists!\"});\n                    onlyShowAwardedPrizes = true;\n                }\n            }\n            else {\n                // We can't get the player's prizes if we failed to get their rank.\n                //prizes.push({\"prize\": \"Rank Unknown\"});\n                onlyShowAwardedPrizes = true;\n            }\n        }\n        // If the challenge is in progress, we can use their current position to determine\n        // the prizes they'll win if they hold that position. (do we need to?)\n        else if (challengeState === \"ISSUED\" || challengeState === \"RUNNING\") {\n            //prizes.push({\"prize\": \"Challenge In Progress\", \"state\": \"Unclaimed\"});\n        }\n        \n        // If something went wrong when trying to figure out what prizes the player should have got\n        // from this event, we can still show what they got.\n        if (onlyShowAwardedPrizes) {\n            var claimedPrizeCollection = Spark.runtimeCollection(\"PlayerProfilePrizes\").findOne(\n            {\n                \"_id\": {\"$oid\": playerId}\n            }, \n            {\n                \"_id\": 0, \"eventPrizes.archived\": 1\n            });\n            \n            if (claimedPrizeCollection !== null && claimedPrizeCollection !== undefined) {\n                var eventPrizeList = claimedPrizeCollection.eventPrizes;\n                if (eventPrizeList !== null && eventPrizeList !== undefined) {\n                    var claimedPrizes = claimedPrizeCollection.eventPrizes.archived;\n                \n                    for (var iClaimedPrizes = 0; iClaimedPrizes < claimedPrizes.length; ++iClaimedPrizes) {\n                        var claimedPrize = claimedPrizes[iClaimedPrizes];\n                        \n                        if (claimedPrize.AwardType === \"TopDown\" && claimedPrize.ChallengeId === challengeId) {\n                            for (var iClaimedPrizeBandPrize = 0; iClaimedPrizeBandPrize < claimedPrize.PrizeBand.Prizes.length; ++iClaimedPrizeBandPrize) {\n                                var claimedPrizeBandPrize = claimedPrize.PrizeBand.Prizes[iClaimedPrizeBandPrize];\n                                \n                                prizes.push({\"prize\": PrizeToShortString(claimedPrizeBandPrize), \"state\": \"Awarded\"});\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            // Okay, we have a list of prizes the player *should* have. Now we need to check what prizes the\n            // player *actually* has.\n            // The unclaimed prize list is exclusively for event goals, so we just need to check the claimed\n            // prize list.\n            var claimedPrizeCollection = Spark.runtimeCollection(\"PlayerProfilePrizes\").findOne(\n            {\n                \"_id\": {\"$oid\": playerId}\n            }, \n            {\n                \"_id\": 0, \"eventPrizes.archived\": 1\n            });\n            \n            if (claimedPrizeCollection !== null && claimedPrizeCollection !== undefined) {\n                var eventPrizeList = claimedPrizeCollection.eventPrizes;\n                if (eventPrizeList !== null && eventPrizeList !== undefined) {\n                    var claimedPrizes = claimedPrizeCollection.eventPrizes.archived;\n                \n                    for (var iExpectedPrizes = 0; iExpectedPrizes < prizes.length; ++iExpectedPrizes) {\n                        var expectedPrize = prizes[iExpectedPrizes];\n                        \n                        for (var iClaimedPrizes = 0; iClaimedPrizes < claimedPrizes.length; ++iClaimedPrizes) {\n                            var claimedPrize = claimedPrizes[iClaimedPrizes];\n                            \n                            // If this prize is a prize for this event, then we should see if any prize in the prize band\n                            // matches our current expected prize. If it does, we set the state of the expected prize to\n                            // \"Awarded\".\n                            if (claimedPrize.AwardType === \"TopDown\" && claimedPrize.ChallengeId === challengeId) {\n                                for (var iClaimedPrizeBandPrize = 0; iClaimedPrizeBandPrize < claimedPrize.PrizeBand.Prizes.length; ++iClaimedPrizeBandPrize) {\n                                    var claimedPrizeBandPrize = claimedPrize.PrizeBand.Prizes[iClaimedPrizeBandPrize];\n                                    \n                                    if (expectedPrize.prize === PrizeToShortString(claimedPrizeBandPrize)) {\n                                        expectedPrize.state = \"Awarded\";\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Add all the data we need for this challenge, and we're sorted; onto the next challenge.\n        enteredEvents.push(\n        {\n            \"eventName\": challenge.challengeName,\n            \"challengeId\": challengeId,\n            \"endDate\": EpochToGameSparksDate(challenge.endDate / 1000),\n            \"state\": challengeState,\n            \"rank\": playerRank,\n            \"totalChallengers\": totalChallengers,\n            \"score\": score,\n            \"prizes\": prizes,\n            \"insaneChallengeExplanation\": insaneChallengeExplanation,\n            \"unavailableRankExplanation\": unavailableRankExplanation,\n            \"unavailableScoreExplanation\": unavailableScoreExplanation\n        });\n    }\n    \n    // Finally, put the data together for Handlebars!\n    hbEventData.events = enteredEvents;\n    hbEventData.queryInfo = {\n        \"playerId\": data.playerId,\n        \"page\": page,\n        \"maxPages\": maxPages,\n        \"startRange\": skip + 1,\n        \"endRange\": Clamp(limit + skip, 0, acceptedChallengesCursor.count()),\n        \"count\": count\n    };\n    return hbEventData;\n}","shortCode":"player_event_data","name":"player_event_data","allowedGroups":""},"player_iap_log":{"template":"<gs-form snippet=\"player_iap_log?playerId={{info.playerId}}\" target=\"iapLog__{{info.playerId}}\">\n    <gs-title-block title=\"IAP Log\" padding=\"5\" height=\"359\">\n        <gs-row>\n            <b>\n                <gs-col width=\"3\">\n                    Transaction ID\n                </gs-col>\n                <gs-col width=\"2\">\n                    Product Shortcode\n                </gs-col>\n                <gs-col width=\"2\">\n                    Currency Credited\n                </gs-col>\n                <gs-col width=\"2\">\n                    Date\n                </gs-col>\n                <gs-col width=\"1\">\n                    Verified?\n                </gs-col>\n            </b>\n        </gs-row>\n        {{#each log}}\n        <gs-row>\n            <gs-col width=\"3\">\n                {{this.transactionId}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.productShortCode}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.currencyCredited}} {{this.currencyType}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.date}}\n            </gs-col>\n            <gs-col width=\"1\">\n                {{this.verified}}\n            </gs-col>\n        </gs-row>\n        {{/each}}\n    </gs-title-block>\n</gs-form>","script":"require(\"GeneralUtilities\");\n\nSpark.setScriptData(\"log\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data) {\n    var playerId = data.playerId;\n    \n    // Undocumented method HOOOOOOOOO!\n    var verifiedPurchaseCollection = Spark.systemCollection(\"verifiedPurchase\").find(\n    { \n        playerId: playerId \n    }\n    ).sort(\n    {\n        when: -1\n    });\n    \n    var transactionAuditCollection = Spark.systemCollection(\"playerTransactionAudit\");\n    var iapLog = [];\n    \n    // We need to match up data from verified purchases with data from the transaction audit.\n    // When GameSpacks is nice enough to respond to my message I sent about two months ago about how their currencyCode\n    // and subUnitPrice data is fucked* then we can actually display how much they spent on stuff.\n    // *not what I actually said\n    while (verifiedPurchaseCollection.hasNext()) {\n        var logEntry = {\n            transactionId: \"\",\n            productShortCode: \"\",\n            date: \"\",\n            verified: false,\n            currencyCredited: 0,\n        };\n        \n        var transaction = verifiedPurchaseCollection.next();\n        logEntry.transactionId = transaction.transactionId;\n        logEntry.productShortCode = transaction.productShortCode;\n        logEntry.date = UnixTimeToReadableString(transaction.when);\n        \n        var auditEntries = transactionAuditCollection.find(\n        { \n            playerId: playerId, \n            transactionId: {\n                \"$exists\": true\n            },\n            transactionId: transaction.transactionId \n        });\n        \n        while (auditEntries.hasNext()) {\n            var auditEntry = auditEntries.next();\n            \n            var auditCurrency = auditEntry.currency;\n            \n            if (auditCurrency !== null && auditCurrency !== undefined) {\n                var auditCurrency1 = auditCurrency.currency1;\n                var auditCurrency2 = auditCurrency.currency2;\n                \n                if (auditCurrency1 !== null && auditCurrency1 !== undefined) {\n                    logEntry.currencyCredited = auditCurrency1.amount;\n                    logEntry.currencyType = \"Cash\";\n                }\n                else if (auditCurrency2 !== null && auditCurrency2 !== undefined) {\n                    logEntry.currencyCredited = auditCurrency2.amount;\n                    logEntry.currencyType = \"Gold\";\n                }\n            }\n\n            logEntry.verified = true;\n        }\n        \n        iapLog.push(logEntry);\n    }\n    \n    return iapLog;\n}","shortCode":"player_iap_log","name":"player_iap_log","allowedGroups":""},"player_master":{"template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-title-block title=\"Edit Player - {{form.player.displayName}} ({{form.player._id.$oid}})\" margin=\"0\" padding=\"10\">\n            <gs-row>\n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"details__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_details?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"currencies__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_currenciesLevels?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"awardPrizes__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_prize_awarder?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"abtests__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_abtests?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n            </gs-row>\n            \n            <gs-row>\n                <gs-col width=\"6\">    \n                    <gs-placeholder id=\"eventData__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_event_data?playerId={{form.player._id.$oid}}&page=1\"></gs-snippet>\n                    </gs-placeholder>  \n                </gs-col>\n                \n                <gs-col width=\"6\">\n                    <gs-placeholder id=\"cars__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_cars?action=view&playerId={{form.player._id.$oid}}&page=1\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n            </gs-row>\n            \n            <gs-row>\n                <gs-col width=\"6\">    \n                    <gs-title-block title=\"Request Log\" margin=\"0\" padding=\"10\"  height=\"360\">\n                        <gs-chart gs_playerid=\"{{form.player._id.$oid}}\" chartType='data' pageSize='50' query='total_requests'></gs-chart>\n                    </gs-title-block>\n                </gs-col>\n                \n                <gs-col width=\"6\">\n                    <gs-placeholder id=\"iapLog__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_iap_log?playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n            </gs-row>\n            \n        </gs-title-block>\n    </gs-col>\n</gs-row>\n\n\n","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        form.player = Spark.systemCollection(\"player\").findOne({\"_id\" : {\"$oid\" : data.playerId}}, {\"userName\" : 1, \"displayName\" : 1});\n        \n        return form;\n    }\n}\n","shortCode":"player_master","name":"player_master","allowedGroups":""},"player_prize_awarder":{"template":"<gs-form snippet=\"player_prize_awarder?action=awardPrize&playerId={{info.playerId}}\" target=\"awardPrizes__{{info.playerId}}\">\n\n    <gs-title-block title=\"Prize Awarder\" padding=\"5\" height=\"250\">\n        \n        <gs-row>\n            \n            <gs-col width=\"3\">\n                Event Name\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <select name=\"eventName\" required>\n                    {{#each info.EventNames}}\n                    <option value=\"{{this}}\">{{this}}</option>\n                    {{/each}}\n                </select>\n                <!--<input name=\"eventName\" value=\"{{info.eventName}}\" type=\"text\" required/>-->\n            </gs-col>\n            \n        </gs-row>\n        \n        {{#if info.eventError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Rank\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"rank\" value=\"{{info.rank}}\" type=\"number\" min=\"1\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Cash\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"cash\" value=\"{{info.cash}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Gold\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"gold\" value=\"{{info.gold}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Bronze Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"bronzeKeys\" value=\"{{info.bronzeKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Silver Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"silverKeys\" value=\"{{info.silverKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Gold Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"goldKeys\" value=\"{{info.goldKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                XP\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"XP\" value=\"{{info.XP}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Car\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"car\" value=\"{{info.car}}\" type=\"text\" name=\"car\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        {{#if info.carError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Pro Pack\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"ppManufacturers\" value =\"{{info.selectedPPManufacturer}}\" style=\"width:100px\">\n                    {{#each info.manufacturers}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"ppClasses\" value=\"{{info.selectedPPClass}}\" style=\"width:50px\">\n                    {{#each info.classes}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <input name=\"proPackQuantity\" value=\"{{info.proPackQuantity}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n        \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Blueprint\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"blueprintCar\" value =\"{{info.selectedBlueprintCar}}\" style=\"width:100px\">\n                    {{#each info.blueprintCars}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <input name=\"blueprintQuantity\" value=\"{{info.blueprintQuantity}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n        \n        </gs-row>\n        \n        {{#if info.blueprintCarError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Award Prize</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        <br/>\n        \n        {{#if info.prizeAwarded}}\n        <gs-row>\n            <gs-col width=\"12\">\n                <gs-alert type=\"success\" message=\"Prize Awarded!\"></gs-alert>\n            </gs-col>\n        </gs-row>\n        {{/if}}\n        \n    </gs-title-block>\n\n</gs-form>","script":"require(\"PlayerDataUtilities\");\nrequire(\"RaceEventUtilities\");\n\nSpark.setScriptData(\"info\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    form.playerId = playerId;\n    \n    switch (data.action) {\n        case \"view\":\n            return view(data);\n        case \"awardPrize\":\n            return awardPrize(data, playerId);\n    }\n    \n    function view(data) {\n        // default values\n        form.eventName = \"Event Name\";\n        form.rank = 1;\n        form.cash = 0;\n        form.gold = 0;\n        form.bronzeKeys = 0;\n        form.silverKeys = 0;\n        form.goldKeys = 0;\n        form.XP = 0;\n        form.car = \"Car Variant ID\";\n        form.proPackQuantity = 0;\n        form.blueprintCar = \"Car Variant ID\";\n        form.blueprintQuantity = 0;\n        \n        // Let's make this easier for CS.\n        AddPossibleEventNamesToForm();\n        \n        // Populate manufacturers and classes lists\n        var allManufacturers = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Manufacturer\");\n        var allClasses = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Class\");\n        var allBlueprintCars = GetAllBlueprintCars();\n        \n        allManufacturers.sort();\n        allClasses.sort();\n        \n        form.manufacturers = allManufacturers;\n        form.classes = allClasses;\n        form.blueprintCars = allBlueprintCars;\n        \n        return form;\n    }\n    \n    function awardPrize(data, playerId) {\n        // Re-add all the values we just had\n        form.eventName = data.eventName;\n        form.rank = data.rank;\n        form.cash = data.cash;\n        form.gold = data.gold;\n        form.bronzeKeys = data.bronzeKeys;\n        form.silverKeys = data.silverKeys;\n        form.goldKeys = data.goldKeys;\n        form.XP = data.XP;\n        form.car = data.car;\n        form.proPackQuantity = data.proPackQuantity;\n        form.blueprintCar = data.blueprintCar;\n        form.blueprintQuantity = data.blueprintQuantity;\n        \n        // Let's make this easier for CS.\n        AddPossibleEventNamesToForm();\n        \n        var allManufacturers = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Manufacturer\");\n        var allClasses = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Class\");\n        var allBlueprintCars = GetAllBlueprintCars();\n        \n        allManufacturers.sort();\n        allClasses.sort();\n        \n        form.manufacturers = allManufacturers;\n        form.classes = allClasses;\n        form.blueprintCars = allBlueprintCars;\n        // This doesn't appear to work, not sure why :(\n        form.selectedPPManufacturer = data.ppManufacturers;\n        form.selectedPPClass = data.ppClasses;\n        form.selectedBlueprintCar = data.blueprintCar;\n        \n        var eventName = form.eventName;\n        var localisedTextTag = \"\";\n        var event = Spark.metaCollection(\"raceEvents\").findOne({\"EventName\": eventName}, \n                                        {\"_id\": 1, \"LocalisedTextTag\": 1});\n        if (event === null || event === undefined) {\n            form.eventError = true;\n            form.message = \"\\\"\" + eventName + \"\\\" is not a valid event\";\n            return form;\n        }\n        else {\n            localisedTextTag = event.LocalisedTextTag;\n        }\n        \n        var carVariantId = form.car;\n        if (carVariantId !== \"\" && carVariantId !== \"Car Variant ID\") {\n            var car = Spark.metaCollection(\"CarInventory\").findOne({\"CarVariantID\": carVariantId}, {\"_id\": 1});\n            if (car === null || car === undefined) {\n                form.carError = true;\n                form.message = \"Not a valid car variant ID\";\n                return form;\n            }\n        }\n        \n        if (data.blueprintCar !== null && data.blueprintCar !== undefined && data.blueprintCar !== \"\" && \n            data.blueprintCar !== \"None\") {\n                \n            if (form.blueprintQuantity < 1) {\n                form.blueprintCarError = true;\n                form.message = \"Quantity needed\";\n                return form;\n            }\n        }\n        \n        // Try and get a valid challenge id for a challenge instance we have been in and has finished\n        var challenge = Spark.systemCollection(\"challengeInstance\").findOne(\n            {\n                challengeName: form.eventName,\n                accepted: {\n                    \"$in\": [playerId]\n                },\n                state: {\n                    \"$in\": GetFinishedRunStatesArray()\n                }\n            },\n            {\n                _id: true\n            }\n        );\n        \n        if (challenge === null || challenge === undefined) {\n            // Couldn't find a challenge for the player that matched all the criteria,\n            // so we'll just take a challenge with the same event name that has finished\n            challenge = Spark.systemCollection(\"challengeInstance\").findOne(\n                {\n                    challengeName: form.eventName,\n                    state: {\n                        \"$in\": GetFinishedRunStatesArray()\n                    }\n                },\n                {\n                    _id: true\n                }\n            );\n        }\n        \n        var unawardedPrize = {};\n        unawardedPrize.AwardType = \"TopDown\";\n        unawardedPrize.EventName = eventName;\n        unawardedPrize.LocalisedTextTag = localisedTextTag;\n        unawardedPrize.PlayerRank = parseInt(form.rank);\n        unawardedPrize.Time = Math.floor(Date.now() / 1000);\n        \n        if (challenge !== null && challenge !== undefined) {\n            unawardedPrize.ChallengeId = challenge._id.$oid;\n        }\n        \n        var prizeBand = {};\n        prizeBand.Goal = \"FinishAtRank\";\n        prizeBand.GoalTarget = form.rank;\n        \n        var prizes = [];\n        // Cash\n        if (data.cash > 0 && data.cash !== null && data.cash !== undefined && !isNaN(data.cash)) {\n            var prize = {};\n            prize.PrizeType = \"Cash\";\n            prize.PrizeValue = data.cash;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Gold\n        if (data.gold > 0 && data.gold !== null && data.gold !== undefined && !isNaN(data.gold)) {\n            var prize = {};\n            prize.PrizeType = \"Gold\";\n            prize.PrizeValue = data.gold;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // XP\n        if (data.XP > 0 && data.XP !== null && data.XP !== undefined && !isNaN(data.XP)) {\n            var prize = {};\n            prize.PrizeType = \"XP\";\n            prize.PrizeValue = data.XP;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Bronze Keys\n        if (data.bronzeKeys > 0 && data.bronzeKeys !== null && data.bronzeKeys !== undefined && \n            !isNaN(data.bronzeKeys)) {\n                \n            var prize = {};\n            prize.PrizeType = \"BronzeKeys\";\n            prize.PrizeValue = data.bronzeKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Silver Keys\n        if (data.silverKeys > 0 && data.silverKeys !== null && data.silverKeys !== undefined && \n            !isNaN(data.silverKeys)) {\n                \n            var prize = {};\n            prize.PrizeType = \"SilverKeys\";\n            prize.PrizeValue = data.silverKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Gold Keys\n        if (data.goldKeys > 0 && data.goldKeys !== null && data.goldKeys !== undefined && !isNaN(data.goldKeys)) {\n            var prize = {};\n            prize.PrizeType = \"GoldKeys\";\n            prize.PrizeValue = data.goldKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Cars\n        if (data.car !== \"\" && data.car !== \"Car Variant ID\") {\n            var prize = {};\n            prize.PrizeType = \"Car\";\n            prize.PrizeValue = data.car;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Pro Packs\n        if (data.proPackQuantity > 0 && data.proPackQuantity !== null && data.proPackQuantity !== undefined && \n            !isNaN(data.proPackQuantity)) {\n                \n            var prize = {};\n            prize.PrizeType = \"ProPack\";\n            prize.PrizeValue = data.ppManufacturers;\n            prize.PrizeClass = data.ppClasses;\n            prize.BlueprintOrProPackCount = data.proPackQuantity;\n            prizes.push(prize);\n        }\n        // Blueprints\n        if (data.blueprintQuantity > 0 && data.blueprintQuantity !== null && data.blueprintQuantity !== undefined && \n            !isNaN(data.blueprintQuantity) && \n            data.blueprintCar !== \"\" && data.blueprintCar !== \"Car Variant ID\" &&\n            data.blueprintCar !== null && data.blueprintCar !== undefined) {\n                \n            var prize = {};\n            prize.PrizeType = \"Blueprint\";\n            prize.PrizeValue = data.blueprintCar;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = parseInt(data.blueprintQuantity);\n            prizes.push(prize);\n        }\n        \n        if (prizes.length === 0) {\n            return form;\n        }\n        \n        prizeBand.Prizes = prizes;\n        unawardedPrize.PrizeBand = prizeBand;\n        \n        var versionedPrizes = GetVersionedEventPrizes(playerId);\n        var successfullyWritten = false;\n    \n        while (!successfullyWritten) {\n            var eventPrizes = versionedPrizes.GetData();\n            eventPrizes.unawarded.push(unawardedPrize);\n            successfullyWritten = versionedPrizes.SetData(eventPrizes);\n        }\n        \n        form.prizeAwarded = true;\n        \n        return form;\n    }\n    \n    function GetAllBlueprintCars() {\n        var cursor = Spark.metaCollection(\"CarInventory\").find(\n            {\n                BlueprintPiecesRequired: {\n                    $gt: 0\n                }\n            },\n            {\n                CarVariantID: true   \n            }\n        );\n        var allBlueprintCars = [];\n        if (cursor !== null && cursor !== undefined) {\n            while (cursor.hasNext()) {\n                var blueprintCar = cursor.next();\n                allBlueprintCars.push(blueprintCar.CarVariantID);\n            }\n        }\n        allBlueprintCars.sort();\n        allBlueprintCars.splice(0, 0, \"None\");\n        \n        return allBlueprintCars;\n    }\n    \n    function AddPossibleEventNamesToForm()\n    {\n        var possibleEventNames = Spark.metaCollection(\"raceEvents\").aggregate(\n            { $match: { \"LocalisedTextTag\": { $regex: \"TEXT_\" } } },\n            { $group: { _id: null, \"EventNames\": { \"$push\" : \"$EventName\"} } });\n        form.EventNames = possibleEventNames[0].EventNames;\n        form.EventNames.sort();\n    }\n}","shortCode":"player_prize_awarder","name":"player_prize_awarder","allowedGroups":""},"player_search":{"template":"<gs-form snippet=\"player_search_results\" target=\"player__results\">\n    <gs-snippet snippet=\"user_query\"></gs-snippet>\n        <gs-col width=\"12\">\n            <gs-submit>Submit</gs-submit>\n        </gs-col>\n</gs-form>","script":"","shortCode":"player_search","name":"player_search","allowedGroups":""},"player_search_results":{"template":"<gs-title-block title=\"Results : {{results.limit}} of {{results.count}}\">\n{{#if results.players}}\n    <gs-row>\n        <b>\n        <gs-row>\n            <gs-col width=\"3\">ID</gs-col>\n            <gs-col width=\"4\">userName</gs-col>\n            <gs-col width=\"4\">displayName</gs-col>\n        </gs-row>\n        </b>\n        {{#each results.players}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"3\">{{_id.$oid}}</gs-col>\n                <gs-col width=\"4\">{{userName}}</gs-col>\n                <gs-col width=\"4\">{{displayName}}</gs-col>\n                <gs-col width=\"1\"><gs-link snippet=\"player_master?playerId={{_id.$oid}}\" target=\"modal-large\"><i class=\"icon-edit\"/></gs-link></gs-col>\n            </gs-row>\n        {{/each}}\n    </gs-row>\n{{/if}}\n</gs-title-block>","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        // query from the query builder\n        var query = data.gsUserQuery;\n        \n        var playerCollection = Spark.systemCollection(\"player\");\n        // total count of players matching query\n        var count = playerCollection.count(query);\n        // limit of results returned\n        var limit = 50;\n        \n        form.count = count;\n        // find and return id, userName and displayName of the players matching query\n        form.players = playerCollection.find(query, {\"userName\" : 1, \"displayName\" : 1}).limit(limit);\n        \n        // if count is lower that the limit\n        if(count < limit){\n            form.limit = count;\n        } else{\n            form.limit = limit;\n        }\n        \n        return form;\n    }\n}","shortCode":"player_search_results","name":"player_search_results","allowedGroups":""},"player_virtual_goods":{"template":"<gs-form snippet=\"player_virtual_goods?action=update&playerId={{form.playerId}}\" target=\"virtual__goods__{{form.playerId}}\">\n    <gs-title-block title=\"Virtual Goods\" padding=\"5\" height=\"250\">\n        {{#if form.aggregatedVGoods}}\n            {{#each form.aggregatedVGoods}}\n                <gs-row>\n                    <gs-col width=\"5\">{{name}}</gs-col>\n                    <gs-col width=\"7\"><input name={{shortCode}} type=\"number\" min=\"0\" max=\"{{max}}\" value=\"{{owned}}\"/></gs-col>\n                </gs-row>\n                <br/>\n            {{/each}}\n            <gs-row>\n                <gs-col width=\"7\" offset=\"1\">\n                    {{#if form.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n                </gs-col>\n                <gs-col width=\"4\">\n                    <gs-submit>Save Changes</gs-submit>\n                </gs-col>\n            </gs-row>\n        {{else}}\n            <gs-row>\n                <b>The game doesn't have any Virtual Goods.</b>\n            </gs-row>\n        {{/if}}\n    </gs-title-block>\n</gs-form>","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    var listVirtualGoodsRequest = new SparkRequests.ListVirtualGoodsRequest();\n    var response = Spark.sendRequestAs(listVirtualGoodsRequest, playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        var aggregatedVGoods = [];\n        \n        for(var i in response.virtualGoods){\n            \n            var virtualGood = response.virtualGoods[i];\n            var max = virtualGood.maxQuantity;\n            \n            // if no maxQty is set use 100\n            if(!max){\n                max = 100;\n            }\n        \n            aggregatedVGoods.push({name:virtualGood.name, shortCode:virtualGood.shortCode, owned:player.hasVGood(virtualGood.shortCode), max:max});\n        }\n\n        form.aggregatedVGoods = aggregatedVGoods;\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // check and set each virtual good\n        for(var i in response.virtualGoods){\n            \n            var virtualGood = response.virtualGoods[i].shortCode;\n            \n            if(data[virtualGood]){\n                setVGoods(virtualGood, player.hasVGood(virtualGood), data[virtualGood]);\n            }\n        }\n        form.updated = true;\n    }\n    \n    \n    // gets the difference between owned and new virtual goods\n    // then adds or removes accordingly\n    function setVGoods(shortCode, owned, toSet){\n        \n        var toSetInt = parseInt(toSet);\n        \n        if(toSetInt > owned){\n            \n            var toAdd = toSetInt-owned;\n            player.addVGood(shortCode, toAdd);\n            \n        } else if(toSetInt < owned){\n            \n            var toRemove = owned-toSetInt;\n            player.useVGood(shortCode, toRemove);\n        }\n    }\n}","shortCode":"player_virtual_goods","name":"player_virtual_goods","allowedGroups":""},"user_query":{"template":"<gs-query name=\"gsUserQuery\" rules=\"{{config.rawRules}}\">\n    \n    <gs-query-field id=\"_id\" \n                    label=\"ID\" \n                    type=\"oid\"/>\n    \n    <gs-query-field id=\"userName\" \n                    label=\"User Name\" \n                    type='string' \n                    operators=\"equal,begins_with,not_equal\"/>\n    \n    <gs-query-field id=\"displayName\" \n                    label=\"Display Name\" \n                    type='string' \n                    operators=\"equal,begins_with,not_equal\"/>\n    \n    <gs-query-field id=\"location.country\" \n                    label=\"Country\" \n                    type=\"country\"/>\n    \n    <gs-query-field id='lastSeen' \n                    label='Last Seen' \n                    type='date'/>\n    \n    <gs-query-field id=\"pushRegistrations.deviceOS\" \n                    label=\"Push Registration Type\" \n                    type='string'\n                    values='{\"IOS\" : \"IOS\", \"ANDROID\" : \"Android\", \"KINDLE\" : \"Kindle\", \"WP8\" : \"Windows Phone 8\", \"W8\" : \"Windows 8\"}'/>\n\n    <gs-query-field id=\"pushRegistrations.pushId\"\n                    label=\"Push Registration ID\"\n                    type='string'/>\n\n    <gs-query-field id=\"externalIds.AM\"\n                    label=\"Amazon ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.FB\"\n                    label=\"Facebook ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.GP\"\n                    label=\"Google Plus ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.ST\"\n                    label=\"Steam ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.TW\"\n                    label=\"Twitter ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n    \n    {{#if config.vGoods}}\n        {{#each config.vGoods}}\n            <gs-query-field id=\"goods.{{shortCode}}\"\n                            label=\"{{name}}\"\n                            type='integer'\n                            group=\"Virtual Goods\"\n                            operators=\"between,less,less_or_equal,greater,greater_or_equal,exists,not_exists\"/>\n        {{/each}}\n    {{/if}}\n    \n    {{#if config.achievements}}\n        <gs-query-field id=\"achievements\" \n                        label=\"Achievement\"\n                        group=\"Achievements\"\n                        type='string'\n                        values='{ {{#each config.achievements}}\"{{shortCode}}\":\"{{name}}\" {{#unless @last}},{{/unless}} {{/each}} }'/>\n    {{/if}}\n    \n    {{#if config.segments}}\n        {{#each config.segments}}\n            {{#if values}}\n                <gs-query-field id=\"segments.{{shortCode}}\"\n                                label=\"{{name}}\"\n                                type='string'\n                                group=\"Segments\"\n                                values='{ {{#each values}}\"{{shortCode}}\":\"{{name}}\" {{#unless @last}},{{/unless}} {{/each}} }'/>\n            {{/if}}\n        {{/each}}\n    {{/if}}\n    \n</gs-query>","script":"Spark.setScriptData(\"config\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        var config = Spark.getConfig();\n        \n        // raw rules allow setting the view of user query\n        var rawRules = data.rawRules;\n        if(rawRules){\n            form.rawRules = rawRules;\n        }\n        \n        // if there are virtual goods add them to the form\n        var vGoods = config.getVirtualGoods();\n        if(vGoods && vGoods.length > 0){\n            form.vGoods = vGoods;\n        }\n        \n        // if there are achievements add them to the form\n        var achievements = config.getAchievements();\n        if(achievements && achievements.length > 0){\n            form.achievements = achievements;\n        }\n        \n        // if there are segments add them to the form\n        var segments = config.getSegments();\n        if(segments && segments.length > 0){\n            form.segments = segments;\n        }\n        \n        return form;\n    }\n}\n","shortCode":"user_query","name":"user_query","allowedGroups":""}},"queries":{"total_requests":{"qbRules":"{\"condition\":\"AND\",\"rules\":[{\"id\":\"@playerId\",\"field\":\"@playerId\",\"type\":\"string\",\"input\":\"text\",\"operator\":\"equal\",\"value\":\"${playerid}\"}]}","esRules":"{\"and\":[{\"term\":{\"@playerId\":\"${playerid}\"}}]}","shortCode":"total_requests","name":"total_requests"}},"displayName":null,"shortCode":null}