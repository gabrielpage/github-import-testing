{"screens":{"RaceEvents":{"shortCode":"RaceEvents","name":"Race Events","template":"<gs-row>\n    <gs-col width=\"7\">\n        <gs-row>\n            <gs-title-block padding=\"10\" title=\"Current Race Events\">\n                <gs-placeholder id=\"ph_raceEventsMainMenu\">\n                    <gs-snippet snippet=\"raceEventsMainMenu\"></gs-snippet>\n                </gs-placeholder>\n            </gs-title-block>\n        </gs-row>\n        <gs-row>\n            <gs-title-block padding=\"10\" title=\"Expired Race Events\">\n                <gs-placeholder id=\"ph_raceEventsExpired\">\n                    <gs-snippet snippet=\"raceEventsExpired\"></gs-snippet>\n                </gs-placeholder>\n            </gs-title-block>\n        </gs-row>\n    </gs-col>\n\n    <gs-col width=\"5\">\n        <gs-placeholder id=\"ph_selectedEventInfo\"></gs-placeholder>\n    </gs-col>\n</gs-row>","groups":[""]},"Constants":{"shortCode":"Constants","name":"Constants","template":"<gs-row>\n    <gs-col width=\"7\">\n        <gs-row>\n            <gs-title-block padding=\"10\" title=\"Constants\">\n                <gs-placeholder id=\"ph_constantsMainMenu\">\n                    <gs-snippet snippet=\"constantsMainMenu\"></gs-snippet>\n                </gs-placeholder>\n            </gs-title-block>\n        </gs-row>\n    </gs-col>\n\n    <gs-col width=\"5\">\n        <gs-placeholder id=\"ph_selectedConstantsInfo\"></gs-placeholder>\n    </gs-col>\n</gs-row>","groups":[]},"InstructionsPerRequest":{"shortCode":"InstructionsPerRequest","name":"InstructionsPerRequest","template":"<gs-title-block title=\"InstructionsPerRequest\" padding=\"0\" margin=\"0\" height=\"1500\"> \n    <gs-chart chartType='hist' group='_type' calc='scriptInstructions' chartPeriod='1d' annotateX='both' query='InstructionsPerRequest'></gs-chart>\n</gs-title-block>","groups":["gameAdmin"]},"ScriptLog":{"shortCode":"ScriptLog","name":"Script Log","template":"<gs-row>\n    <gs-title-block title=\"Script Log Search\" padding=\"10\">\n        <gs-form snippet=\"script_log_search_results\" target=\"script_log_search_results\">\n            <gs-snippet snippet=\"script_log_query\"></gs-snippet>\n                <gs-row> \n                    <gs-col width=\"2\"></gs-col>\n                    <gs-col width=\"8\">\n                        <gs-submit>Submit</gs-submit>\n                    </gs-col>\n                    <gs-col width=\"2\" align=\"right\">\n                        <gs-link snippet=\"script_log_level?action=view\" target=\"modal-small\">Edit logging level&nbsp;&nbsp;<i class=\"icon-edit\"></i></gs-link>\n                    </gs-col>\n                </gs-row>\n        </gs-form>\n    </gs-title-block>\n</gs-row>\n\n \n<gs-row>\n    <gs-placeholder id=\"script_log_search_results\"></gs-placeholder>\n</gs-row>","groups":["gameAdmin"]},"Leaderboards":{"shortCode":"Leaderboards","name":"Leaderboards","template":"<gs-row>\n    <gs-col width=\"3\">\n        <gs-title-block title=\"Leaderboards\" padding=\"10\">\n            <gs-placeholder id=\"leaderboards\">\n                <gs-snippet snippet=\"leaderboards_main_menu\"></gs-snippet>\n            </gs-placeholder>\n        </gs-title-block>\n    </gs-col>\n\n    <gs-col width=\"9\">\n        <gs-placeholder id=\"results__main\"></gs-placeholder>\n    </gs-col>\n</gs-row>","groups":[""]},"Players":{"shortCode":"Players","name":"Players","template":"<gs-row>\n    <gs-title-block title=\"Player Search\" padding=\"10\">\n        <gs-row>\n            <gs-snippet snippet=\"player_search\"></gs-snippet>\n        </gs-row>\n    </gs-title-block>\n</gs-row>\n\n<gs-row>\n    <gs-placeholder id=\"player__results\"></gs-placeholder>\n</gs-row>","groups":[""]},"ServerClock":{"shortCode":"ServerClock","name":"Server Clock","template":"<gs-col width=\"7\">\n    <gs-row>\n        <gs-title-block padding=\"10\" title=\"Server Clock\">\n            <gs-placeholder id=\"ph_serverClockMainPage\">\n                <gs-snippet snippet=\"serverClockMainPage?action=enter\">\n                </gs-snippet>\n            </gs-placeholder>\n        </gs-title-block>\n    </gs-row>\n</gs-col>","groups":["gameAdmin"]}},"snippets":{"leaderboards_entry_delete":{"shortCode":"leaderboards_entry_delete","name":"leaderboards_entry_delete","scriptData":"","script":"Spark.setScriptData(\"entry\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    var shortCode = data.shortCode;\n    var entryId = data.entryId;\n    var leaderboard = Spark.getLeaderboards().getLeaderboard(shortCode);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"delete\":\n            deletion(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        var rank = data.rank;\n        \n        form.shortCode = shortCode;\n        form.entryId = entryId;\n        form.rank = rank;\n        \n        return form;\n    }\n    \n    // deletes the entry and the running total if it's set to true\n    function deletion(data){\n        \n        var deleteRunningTotal = false;\n        \n        if(data.deleteRunningTotal){\n            deleteRunningTotal = true;\n        }\n        \n        leaderboard.deleteEntry(entryId, deleteRunningTotal);\n        form.updated = true;\n        \n        return form;   \n    }\n}","template":"{{#if entry.updated}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet target=\"filtered__results\" snippet=\"leaderboards_results?shortCode={{entry.shortCode}}&rank={{entry.rank}}&count=50\"></gs-snippet>\n{{else}}\n    <gs-row>\n        <gs-form snippet=\"leaderboards_entry_delete?shortCode={{entry.shortCode}}&action=delete&entryId={{entry.entryId}}&rank={{entry.rank}}\" target=\"leaderboards__drop\">\n            <gs-title-block title=\"Leaderboard - {{entry.shortCode}}\" padding=\"10\" margin=\"0\">\n                <gs-row>\n                    <gs-col width=\"12\">\n                        <h4>Delete the entry for {{entry.entryId}}?</h4>       \n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Delete Running Total Data <input type=\"checkbox\" id=\"deleteRunningTotal\" name=\"deleteRunningTotal\" class=\"checky\"/>\n    \t\t\t        <label for=\"deleteRunningTotal\" class=\"checky\"><span></span></label>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        <gs-submit>Submit</gs-submit>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n        </gs-form>\n    </gs-row>\n{{/if}}","groups":[""]},"leaderboards_drop":{"shortCode":"leaderboards_drop","name":"leaderboards_drop","scriptData":"","script":"Spark.setScriptData(\"leaderboard\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    var shortCode = data.shortCode;\n    var entryId = data.entryId;\n    var leaderboard = Spark.getLeaderboards().getLeaderboard(shortCode);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"delete\":\n            return deletion(data);\n    }\n    \n    function view(data){\n        \n        form.shortCode = shortCode;\n        \n        return form;\n    }\n    \n    // drops the leaderboard and the running total if it's set to true\n    function deletion(data){\n        \n        var deleteRunningTotal = data.deleteRunningTotal;\n    \n        if(deleteRunningTotal != null){\n            leaderboard.drop(true);\n        }else{\n            leaderboard.drop();\n        }\n    \n        form.updated = true;\n        \n        return form;   \n    }\n}","template":"\n{{#if leaderboard.updated}}\n    <gs-modal-close></gs-modal-close>\n    <gs-snippet target=\"leaderboards\" snippet=\"leaderboards_main_menu\"></gs-snippet>\n    <gs-snippet snippet=\"leaderboards_filter?action=view&shortCode={{leaderboard.shortCode}}\" target=\"results__main\"></gs-snippet>\n{{else}}\n    <gs-row>\n        <gs-form snippet=\"leaderboards_drop?shortCode={{leaderboard.shortCode}}&action=delete\" target=\"leaderboards__drop\">\n            <gs-title-block title=\"Leaderboard - {{leaderboard.shortCode}}\" padding=\"10\" margin=\"0\">\n                <gs-row>\n                    <gs-col width=\"12\">\n                        <h4>Are you sure you want to delete the leaderboard?</h4>       \n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        Delete Running Total Data <input type=\"checkbox\" id=\"deleteRunningTotal\" name=\"deleteRunningTotal\" class=\"checky\"/>\n    \t\t\t        <label for=\"deleteRunningTotal\" class=\"checky\"><span></span></label>\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <gs-col width=\"12\">\n                        <input type=\"submit\" />\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n        </gs-form>\n    </gs-row>\n{{/if}}","groups":[""]},"deleteRaceEvent":{"shortCode":"deleteRaceEvent","name":"Race Events: Delete Event","scriptData":"{\n    \"eventId\": \"552e3d39e4b086f3fce61b7b\"\n}","script":"var queriedEventId = Spark.data.scriptData.eventId;\nvar eventCollection = Spark.runtimeCollection(\"raceEvents\");\n\nvar success = eventCollection.remove({\"_id\" : {\"$oid\" : queriedEventId}});\n\nSpark.setScriptData(\"success\", success);","template":"<gs-snippet snippet=\"raceEventsMainMenu\"></gs-snippet>\n<gs-snippet snippet=\"raceEventsExpired\" target=\"ph_raceEventsExpired\"></gs-snippet>\n<gs-snippet snippet=\"displayRaceEvent?eventId=null\" target=\"ph_selectedEventInfo\"></gs-snippet>","groups":[]},"createRaceEvent":{"shortCode":"createRaceEvent","name":"Race Events: Create Event","scriptData":"","script":"var epochUtcNow = (Date.now() / 1000) + 86400; // Set the start date to now + 1 day.\nvar newEvent =\n{ \n\t\"EventName\": \"New Event\",\n\t\"EventType\": \"Earnings\",\n\t\"Restrictions\":\n\t{\n\t\t\"Class\": [],\n\t\t\"Car\": [],\n\t\t\"Manufacturer\": [],\n\t\t\"Balance\": 0\n\t},\n\t\"Track\": \"\",\n\t\"StartDate\": epochUtcNow,\n\t\"AlwaysActive\": true,\n\t\"IsSlam\": false,\n\t\"LeagueDuration\": 1440,\n\t\"EndDate\": 0,\n\t\"Expired\": false,\n\t\"PreviousWinner\": \"\",\n\t\"AssetBundle\": \"\",\n\t\"VisibleIfIneligible\": true,\n\t\"DebugEvent\": false,\n\t\"IsSlam\": false,\n\t\"Sort\": 0,\n\t\"LeaderboardShortcode\": \"\",\n\t\"LeagueNumber\": 0,\n\t\"PartitionSize\": 0,\n\t\"OverrideEvent\": false,\n\t\"TopPrizes\": [\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n\t\t},\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n\t\t},\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n        }\n\t],\n\t\"BottomPrizes\": [\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n\t\t},\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n\t\t},\n\t\t{\n\t\t\t\"Target\": 0,\n\t\t\t\"TargetPrize\": \"Cash\",\n\t\t\t\"TargetValue\": \"0\"\n\t\t}\n    ]\n}\n\n// We get the collection and add the placeholder \"document\" (the JSON above) into it.\nvar eventCollection = Spark.runtimeCollection(\"raceEvents\");\neventCollection.insert(newEvent);\n\n// This is hilarious. Inserting something into a collection returns nothing but whether it succeeded or not.\n// It won't fail, so I don't care. What I actually care about is the auto-generated ID of what I just added so I\n// can pass it to displayRaceEvent. I thought I'd generate it myself using something like MongoDB.ObjectID() and\n// retain it, but hehehehehheheheh no. You can't.\n// Literally the only way is to go back into the collection and skip all but the last event, then get the ID.\n// Christ...\nvar numberOfEvents = eventCollection.count();\nvar lastElement = eventCollection.find({}).skip(numberOfEvents - 1).next();\n\nSpark.setScriptData(\"newEventID\", lastElement._id.$oid );","template":"<gs-snippet snippet=\"displayRaceEvent?eventId={{newEventID}}\" target=\"ph_selectedEventInfo\"></gs-snippet>\n<gs-snippet snippet=\"raceEventsMainMenu\"></gs-snippet>","groups":[]},"displayRaceEvent":{"shortCode":"displayRaceEvent","name":"Race Events: Display Event","scriptData":"{\n \"eventId\": \"55954133e4b03d129267cf2c\"\n}","script":"var queriedEventId = Spark.data.scriptData.eventId;\n\nif (queriedEventId != \"null\")\n{\n    var eventCollection = Spark.runtimeCollection(\"raceEvents\");\n    var selectedEvent = eventCollection.findOne({\"_id\" : {$oid : queriedEventId}})\n    Spark.setScriptData(\"selectedEvent\", selectedEvent);\n    Spark.setScriptData(\"CarRestrictionsAsString\", getCarRestrictionsAsString(selectedEvent));\n    Spark.setScriptData(\"ManufacturerRestrictionsAsString\", getManufacturerRestrictionsAsString(selectedEvent));\n    Spark.setScriptData(\"ClassRestrictionS\", selectedEvent.Restrictions.Class.indexOf(\"S\") > -1);\n    Spark.setScriptData(\"ClassRestrictionA\", selectedEvent.Restrictions.Class.indexOf(\"A\") > -1);\n    Spark.setScriptData(\"ClassRestrictionB\", selectedEvent.Restrictions.Class.indexOf(\"B\") > -1);\n    Spark.setScriptData(\"ClassRestrictionC\", selectedEvent.Restrictions.Class.indexOf(\"C\") > -1);\n    \n    Spark.setScriptData(\"TopPrizeBandCount\", selectedEvent.TopPrizes.length);\n    Spark.setScriptData(\"BottomPrizeBandCount\", selectedEvent.BottomPrizes.length);\n    \n    // Gotta convert Epoch back to readable dates...\n    // GameSparks works with Epoch times in milliseconds just because it HAS to be friggin' awkward!\n    var ReadableStartDate = new Date(selectedEvent.StartDate * 1000);\n    var ReadableEndDate = new Date(selectedEvent.EndDate * 1000);\n    // And if it wasn't being awkward enough, toIsoString converts the date into ISO-8601, but adds\n    // SECONDS. datetime-local fields don't recognise seconds! ARGHHHH\n    Spark.setScriptData(\"StartDate\", ReadableStartDate.toISOString().substr(0, 16));\n    Spark.setScriptData(\"EndDate\", ReadableEndDate.toISOString().substr(0, 16));\n    \n    // Our league duration is stored in minutes. We've gotta convert them to days, hours and minutes.\n    var PreMinutesRemaining = selectedEvent.LeagueDuration;\n    var MinutesRemaining = selectedEvent.LeagueDuration;\n    var DaysRemaining = Math.floor((selectedEvent.LeagueDuration / 1440));\n    MinutesRemaining -= DaysRemaining * 1440;\n    var HoursRemaining = Math.floor(MinutesRemaining / 60);\n    MinutesRemaining -= HoursRemaining * 60;\n    \n    Spark.setScriptData(\"DaysRemaining\", DaysRemaining);\n    Spark.setScriptData(\"HoursRemaining\", HoursRemaining);\n    Spark.setScriptData(\"MinutesRemaining\", MinutesRemaining);\n    Spark.setScriptData(\"PreMinutesRemaining\", MinutesRemaining);\n}\n\nfunction getCarRestrictionsAsString(selectedEvent)\n{\n    return selectedEvent.Restrictions.Car.join(\", \");\n}\n\nfunction getManufacturerRestrictionsAsString(selectedEvent)\n{\n    return selectedEvent.Restrictions.Manufacturer.join(\", \");\n}","template":"{{#compare selectedEvent \"!=\" null}}\n<gs-title-block title=\"Event: {{selectedEvent.EventName}}\" padding=\"10\">\n    <gs-form snippet=\"updateRaceEvent?eventId={{selectedEvent._id.$oid}}\" target=\"ph_raceEventsMainMenu\">\n        <!-- General Stuff !-->\n        <gs-row><gs-col align=center><b>General</b></gs-col></gs-row>\n        <hr>\n        <!-- Event ID Display !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b title=\"The event's ObjectID.\">Event ID</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                {{selectedEvent._id.$oid}}\n            </gs-col>\n        </gs-row>\n        <!-- Event Name Edit Box !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Event Name</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"EventName\" value=\"{{selectedEvent.EventName}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Ranking Type Dropdown Box !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Ranking Type</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <select name=\"EventType\" class=\"input-block-level\">\n                    <option value=\"Earnings\" {{#compare \"Earnings\" \"==\" selectedEvent.EventType}}selected{{/compare}}>Earnings</option>\n                    <option value=\"Time\" {{#compare \"Time\" \"==\" selectedEvent.EventType}}selected{{/compare}}>Time</option>\n                    <option value=\"Score\" {{#compare \"Score\" \"==\" selectedEvent.EventType}}selected{{/compare}}>Score</option>\n                </select>\n            </gs-col>\n        </gs-row>\n        <!-- Track Name Edit Box !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Track Name</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"Track\" value=\"{{selectedEvent.Track}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Previous Winner Edit Box !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Previous Winner</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"PreviousWinner\" value=\"{{selectedEvent.PreviousWinner}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Visible If Ineligible Checkbox !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Visible If Ineligible</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"checkbox\" name=\"VisibleIfIneligible\" {{#compare selectedEvent.VisibleIfIneligible \"==\" true}}checked{{/compare}}/>\n            </gs-col>\n        </gs-row>\n        <!-- Debug Event Checkbox !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Debug Event</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"checkbox\" name=\"DebugEvent\" {{#compare selectedEvent.DebugEvent \"==\" true}}checked{{/compare}}/>\n            </gs-col>\n        </gs-row>\n        <!-- Slam Event Checkbox !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Slam</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"checkbox\" name=\"IsSlam\" {{#compare selectedEvent.IsSlam \"==\" true}}checked{{/compare}}/>\n            </gs-col>\n        </gs-row>\n        <br>\n        \n        <!-- Restrictions !-->\n        <!-- TODO: Maybe we should keep the classes and the car types in a metadata collection. !-->\n        <gs-row><gs-col align=center><b>Restrictions</b></gs-col></gs-row>\n        <hr>\n        <!-- Class Restriction Checkboxes !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Class(es)</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"checkbox\" name=\"ClassRestrictionS\" value=\"true\"\n                {{#compare ClassRestrictionS \"==\" true}}checked{{/compare}}\n                > S&nbsp;&nbsp;\n                <input type=\"checkbox\" name=\"ClassRestrictionA\" value=\"true\"\n                {{#compare ClassRestrictionA \"==\" true}}checked{{/compare}}\n                > A&nbsp;&nbsp;\n                <input type=\"checkbox\" name=\"ClassRestrictionB\" value=\"true\"\n                {{#compare ClassRestrictionB \"==\" true}}checked{{/compare}}\n                > B&nbsp;&nbsp;\n                <input type=\"checkbox\" name=\"ClassRestrictionC\" value=\"true\"\n                {{#compare ClassRestrictionC \"==\" true}}checked{{/compare}}\n                > C\n            </gs-col>\n        </gs-row>\n        <!-- Car Restriction Text Field !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Car(s)</b>\n            </gs-col>\n             <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"CarRestrictions\"\n                value=\"{{CarRestrictionsAsString}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Manufacturer Restriction Text Field !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Manufacturer(s)</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"ManufacturerRestrictions\"\n                value=\"{{ManufacturerRestrictionsAsString}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Balance Restriction Text Field !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Minimum Balance</b>\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <input type=\"number\" placeholder=\"0\" name=\"BalanceRestriction\"\n                value=\"{{selectedEvent.Restrictions.Balance}}\"/>\n            </gs-col>\n        </gs-row>\n        <br>\n        \n        <!-- Time Information !-->\n        <gs-row><gs-col align=center><b>Event Time Information</b></gs-col></gs-row>\n        <hr>\n        <!-- Always Active Checkbox !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Always Active</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"checkbox\" name=\"AlwaysActive\" {{#compare selectedEvent.AlwaysActive \"==\" true}}checked{{/compare}}/>\n            </gs-col>\n        </gs-row>\n        <!-- TODO: Can we do something depending on whether that checkbox is active or not? !-->\n        <!--       I wanna hide the end date and show the league duration if it's checked. !-->\n        <!--       Let's do this for now... !-->\n        <!-- Event Start Date !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Start Date (UTC)</b>\n            </gs-col>\n            <gs-col width=\"6\" align=\"left\">\n                <input type=\"datetime-local\" placeholder=\"\" name=\"StartDate\" value=\"{{StartDate}}\"  class=\"input-block-level\"/>\n            </gs-col>\n        </gs-row>\n        {{#compare selectedEvent.AlwaysActive \"==\" true}}\n            <!-- Event Duration Box !-->\n            <gs-row>\n                <gs-col width=\"4\" align=\"right\">\n                    <b>League Duration</b>\n                </gs-col>\n                <gs-col width=\"2\" align=\"center\">\n                    Days\n                </gs-col>\n                <gs-col width=\"2\" align=\"center\">\n                    Hrs\n                </gs-col>\n                <gs-col width=\"2\" align=\"center\">\n                    Mins\n                </gs-col>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"4\" align=\"right\">\n                </gs-col>\n                <!-- Days !-->\n                <gs-col width=\"2\" align=\"left\">\n                    <input type=\"number\" placeholder=\"1\" name=\"LeagueDurationD\" value=\"{{DaysRemaining}}\"/>\n                </gs-col>\n                <!-- Hours !-->\n                <gs-col width=\"2\" align=\"left\">\n                    <input type=\"number\" placeholder=\"0\" name=\"LeagueDurationH\" value=\"{{HoursRemaining}}\"/>\n                </gs-col>\n                <!-- Minutes !-->\n                <gs-col width=\"2\" align=\"left\">\n                    <input type=\"number\" placeholder=\"0\" name=\"LeagueDurationM\" value=\"{{MinutesRemaining}}\"/>\n                </gs-col>\n            </gs-row>\n        {{else}}\n            <!-- Event End Date !-->\n            <gs-row>\n                <gs-col width=\"4\" align=\"right\">\n                    <b>End Date (UTC)</b>\n                </gs-col>\n                <gs-col width=\"6\" align=\"left\">\n                    <input type=\"datetime-local\" placeholder=\"\" name=\"EndDate\" value=\"{{EndDate}}\"  class=\"input-block-level\"/>\n                </gs-col>\n            </gs-row>\n        {{/compare}}\n        <!-- Event Expired !-->\n        <gs-row>\n            {{#compare selectedEvent.AlwaysActive \"==\" false}}\n                <gs-col width=\"4\" align=\"right\">\n                    <b>Expired</b>\n                </gs-col>\n                <gs-col width=\"8\" align=\"left\">\n                    <input type=\"checkbox\" name=\"Expired\" {{#compare selectedEvent.Expired \"==\" true}} checked {{/compare}}/>\n                </gs-col>\n            {{/compare}}\n        </gs-row>\n        <br>\n        \n        <!-- Leaderboard Information !-->\n        <gs-row><gs-col align=center><b>Leaderboard</b></gs-col></gs-row>\n        <hr>\n        <!-- League Number !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>League Number</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                {{selectedEvent.LeagueNumber}}\n            </gs-col>\n        </gs-row>\n        <!-- Partition Size !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Partition Size</b>\n            </gs-col>\n            <gs-col width=\"4\" align=\"left\">\n                <input type=\"number\" name=\"PartitionSize\" value=\"{{selectedEvent.PartitionSize}}\"/>\n            </gs-col>\n        </gs-row>\n        <br>\n        \n        <!-- Prize Band Information !-->\n        <gs-row><gs-col align=center><b>Prize Bands</b></gs-col></gs-row>\n        <hr>\n        <!-- Top Prizes !-->\n        <gs-row>\n            <gs-col width=\"3\" align=\"right\">\n                <b>Top Prizes</b>\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Rank Req.\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Prize Type\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Prize Value\n            </gs-col>\n        </gs-row>\n        <!-- NEW Top Prize Info -->\n        <!-- This isn't fully working yet. Needs a bit more before we can add and remove bands in the form. -->\n        <gs-snippet snippet=\"showTopDownPrizeBands?eventId={{selectedEvent._id.$oid}}\"></gs-snippet>\n        <!--<gs-row>-->\n        <!--    <gs-col align=\"right\">-->\n        <!--        <gs-submit snippet=\"showTopDownPrizeBands?eventId={{selectedEvent._id.$oid}}&addNew=true\"-->\n        <!--                   target=\"ph_topDownPrizeBands\">-->\n        <!--            <b>New Top Prize Band</b>-->\n        <!--        </gs-submit>-->\n        <!--        <gs-link snippet=\"showTopDownPrizeBands?eventId={{selectedEvent._id.$oid}}&addNew=true\"-->\n        <!--                 target=\"ph_topDownPrizeBands\">-->\n        <!--                 <b>Add New Prize Band</b>&nbsp;&nbsp;<i class=\"icon-plus\"/>-->\n        <!--        </gs-link>-->\n        <!--    </gs-col>-->\n        <!--</gs-row>-->\n        <br>\n        <!-- Top Prize Info\n        <gs-row>\n            <gs-col width=\"3\" align=\"right\">\n            Prize Band {{math @index \"+\" 1}}\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <input type=\"number\" placeholder=\"\" name=\"TopTarget{{@index}}\" value=\"{{this.Target}}\"/>\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <select name=\"TopTargetPrize{{@index}}\" class=\"input-block-level\">\n                    <option value=\"Cash\" {{#compare \"Cash\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Cash</option>\n                    <option value=\"Creditz\" {{#compare \"Creditz\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Creditz</option>\n                    <option value=\"Nitrous\" {{#compare \"Nitrous\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Nitrous</option>\n                    <option value=\"Car\" {{#compare \"Car\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Car</option>\n                </select>\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"TopTargetPrizeValue{{@index}}\" value=\"{{this.TargetPrizeValue}}\"/>\n            </gs-col>\n        </gs-row>\n         !-->\n        \n        \n        <!-- COMING SOON! \n        <gs-snippet snippet=\"addPrizeBandLink?prizeBandCount={{TopPrizeBandCount}}&prizeBandType=Top\"></gs-snippet>\n        !-->\n        <br>\n        \n        <!-- Bottom Prizes !-->\n        <gs-row>\n            <gs-col width=\"3\" align=\"right\">\n                <b>Bottom Prizes</b>\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Target\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Prize Type\n            </gs-col>\n            <gs-col width=\"3\" align=\"center\">\n                Prize Value\n            </gs-col>\n        </gs-row>\n        <!-- Bottom Prize Info !-->\n        {{#each selectedEvent.BottomPrizes}}\n        <gs-row>\n            <gs-col width=\"3\" align=\"right\">\n            Prize Target {{math @index \"+\" 1}}\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <input type=\"number\" placeholder=\"\" name=\"BottomTarget{{@index}}\" value=\"{{this.Target}}\"/>\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <select name=\"BottomTargetPrize{{@index}}\" class=\"input-block-level\">\n                    <option value=\"Cash\" {{#compare \"Cash\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Cash</option>\n                    <option value=\"Creditz\" {{#compare \"Creditz\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Creditz</option>\n                    <option value=\"Nitrous\" {{#compare \"Nitrous\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Nitrous</option>\n                    <option value=\"Car\" {{#compare \"Car\" \"==\" this.TargetPrizeType}}selected{{/compare}}>Car</option>\n                </select>\n            </gs-col>\n            <gs-col width=\"3\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"BottomTargetPrizeValue{{@index}}\" value=\"{{this.TargetPrizeValue}}\"/>\n            </gs-col>\n        </gs-row>\n        {{/each}}\n        <!-- COMING SOON! \n        <gs-snippet snippet=\"addPrizeBandLink?prizeBandCount={{BottomPrizeBandCount}}&prizeBandType=Bottom\"></gs-snippet>\n        !-->\n        <!-- Misc. Information !-->\n        <gs-row><gs-col align=center><b>Miscellaneous</b></gs-col></gs-row>\n        <hr>\n        <!-- Asset Bundle !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Bundle Shortcode</b>\n            </gs-col>\n            <gs-col width=\"8\" align=\"left\">\n                <input type=\"text\" placeholder=\"\" name=\"AssetBundle\" value=\"{{selectedEvent.AssetBundle}}\"/>\n            </gs-col>\n        </gs-row>\n        <!-- Sort Order !-->\n        <gs-row>\n            <gs-col width=\"4\" align=\"right\">\n                <b>Sort Order</b>\n            </gs-col>\n            <gs-col width=\"2\" align=\"left\">\n                <input type=\"number\" placeholder=\"\" name=\"Sort\" value=\"{{selectedEvent.Sort}}\"/>\n            </gs-col>\n        </gs-row>\n        <br>\n        <!-- Submission Buttons !-->\n        <gs-row>\n            <gs-col width=\"6\" align=\"left\">\n                <gs-submit><b>Update Event</b></gs-submit>\n            </gs-col>\n            <gs-col width=\"6\" align=\"right\">\n                <gs-submit snippet=\"deleteRaceEvent?eventId={{selectedEvent._id.$oid}}\">\n                    <font color=\"red\"><b>Delete Event</b></font>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n    </gs-form>\n</gs-title-block>\n{{/compare}}","groups":[]},"leaderboards_filter":{"shortCode":"leaderboards_filter","name":"leaderboards_filter","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"delete\":\n            deletion(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        var shortCode = data.shortCode;\n        var rank = data.rank;\n        var count = data.count;\n        \n        //if filter didn't receive rank and count parameters, we set them to defaults\n        if(rank == null || count == null){\n            rank = 1;\n            count = 50;\n        }\n        \n        form.rank = rank;\n        form.count = count;\n        form.shortCode = shortCode;\n        \n        return form;\n    }\n    \n    function deletion(data){\n        \n        // deletes an entry based on Id\n        var entryId = data.entryId;\n        var deleteRunningTotal = data.deleteRunningTotal;\n        var leaderboard = Spark.getLeaderboards().getLeaderboard(shortCode);\n        \n        // if deleteRunning totan is set, we delete the entry, and the running total for that entry\n        if(deleteRunningTotal != null){\n            leaderboard.deleteEntry(entryId, true);\n            // otherwise only delete the entry\n        }else{\n            leaderboard.deleteEntry(entryId, false);\n        }\n    }\n}","template":"<gs-row>\n    <gs-title-block title=\"Leaderboard - {{form.shortCode}}\" padding=\"10\">\n        <gs-row>\n            <gs-col width=\"4\">\n               <gs-form snippet=\"leaderboards_results?shortCode={{form.shortCode}}\" target=\"filtered__results\">\n                    <gs-row>\n                        <gs-col width=\"6\">\n                            <input type=\"number\" min=\"1\" name=\"rank\" value=\"{{form.rank}}\"/>\n                        </gs-col>\n                        <gs-col width=\"6\">\n                            <input type=\"submit\" value=\"Go to Rank\" />\n                        </gs-col>\n                    </gs-row>\n                </gs-form>\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-link title=\"Delete All Entries\" snippet=\"leaderboards_drop?action=view&shortCode={{form.shortCode}}\" target=\"modal-small\"><button>Delete All Entries</button></gs-link>\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-form snippet=\"leaderboards_results?shortCode={{form.shortCode}}\" target=\"filtered__results\">\n                    <gs-row>\n                        <gs-col width=\"6\">\n                            <input type=\"text\" placeholder=\"Player/Team ID\" name=\"playerId\" value=\"{{form.itemId}}\"/>\n                        </gs-col>\n                        <gs-col width=\"6\">\n                            <input type=\"submit\" value=\"Go to Entry\" />\n                        </gs-col>    \n                    </gs-row>\n                </gs-form>\n            </gs-col>\n        </gs-row>\n    </gs-title-block>\n</gs-row>\n<gs-row>\n    <gs-row>\n        <gs-placeholder id=\"filtered__results\">\n            <gs-snippet snippet=\"leaderboards_results?shortCode={{form.shortCode}}&rank={{form.rank}}&count=50\"></gs-snippet>\n        </gs-placeholder>\n    </gs-row>        \n</gs-row>","groups":[""]},"leaderboards_partition_menu":{"shortCode":"leaderboards_partition_menu","name":"leaderboards_partition_menu","scriptData":"","script":"Spark.setScriptData(\"partitioned\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        var shortCode = data.shortCode;\n        var leaderboard = Spark.getLeaderboards().getLeaderboard(shortCode);\n        var name = leaderboard.getName();\n        var partitions = leaderboard.getPartitions();\n        \n        // check how many partitions exist\n        if(partitions.length > 0){\n            \n            var leaderboards = [];\n            var partition = null;\n            \n            // each partition will be used as an option in a select\n            for(var i in partitions){\n                partition = partitions[i];\n                leaderboards.push({shortCode : partition.getShortCode()});\n            }\n            form.leaderboards = leaderboards;\n        }\n        \n        form.shortCode = shortCode;\n        form.name = name;\n        \n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"6\" align=\"left\">{{partitioned.name}}</gs-col>\n    <gs-col width=\"4\">{{partitioned.shortCode}}</gs-col>\n    <gs-col width=\"2\">\n        <gs-link snippet=\"leaderboards_main_menu\" target=\"leaderboards\"><i class=\"icon-chevron-down\"/></gs-link>\n    </gs-col>\n</gs-row>\n\n{{#if partitioned.leaderboards}}\n    <gs-form snippet=\"leaderboards_filter?action=view&shortCode={{shortCode}}\" target=\"results__main\">\n        <gs-row>\n            <gs-col width=\"10\">\n                <select name=\"shortCode\" class=\"input-block-level\">\n                    {{#each partitioned.leaderboards}}\n                        <option value=\"{{shortCode}}\">{{shortCode}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            <gs-col width=\"2\">\n                <gs-submit><i class=\"icon-edit\"></i></gs-submit>\n            </gs-col>\n        </gs-row>\n    </gs-form>\n{{else}}\n    This Leaderboard has no partitions.\n{{/if}}\n\n","groups":[""]},"leaderboards_main_menu":{"shortCode":"leaderboards_main_menu","name":"leaderboards_main_menu","scriptData":"","script":"Spark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        //get all leaderboards\n        var leaderboards = Spark.getLeaderboards().listLeaderboards();\n\n        var aggregatedLeaderboards = [];\n        var leaderboard = null;\n        \n        // for each leaderboard\n        for(var i = 0; i<leaderboards.length; i++){\n            leaderboard = leaderboards[i];\n             \n            // check if the leaderboard is partitioned\n            if(leaderboard.isPartitioned()){\n                aggregatedLeaderboards.push({shortCode : leaderboard.getShortCode(), name : leaderboard.getName(), partitioned : true});\n            } else{\n                aggregatedLeaderboards.push({shortCode : leaderboard.getShortCode(), name : leaderboard.getName()})\n            }\n        }\n        \n        form.leaderboards = aggregatedLeaderboards;\n        \n        return form;\n    }\n}\n","template":"{{#if data.leaderboards.length}}\n    <gs-placeholder id=\"leaderboards\">\n        <gs-row>\n            <gs-col width=\"6\" align=\"left\">\n                <b>Name</b>\n            </gs-col>\n            \n            <gs-col width=\"4\">\n                <b>ShortCode</b>\n            </gs-col>\n        </gs-row>\n        \n        {{#each data.leaderboards}}\n            {{#if partitioned}}\n                <hr/>\n                <gs-row>\n                    <gs-placeholder  id=\"partitions__{{shortCode}}\">\n                    <gs-col width=\"6\" align=\"left\">{{name}}</gs-col>\n                    <gs-col width=\"4\">{{shortCode}}</gs-col>\n                    <gs-col width=\"2\">\n                        <gs-link snippet=\"leaderboards_partition_menu?shortCode={{shortCode}}\" target=\"partitions__{{shortCode}}\"><i class=\"icon-chevron-right\"/></gs-link>\n                    </gs-col>\n                    </gs-placeholder>\n                </gs-row>\n            {{else}}\n                <hr/>\n                <gs-row>\n                    <gs-col width=\"6\" align=\"left\">{{name}}</gs-col>\n                    <gs-col width=\"4\">{{shortCode}}</gs-col>\n                    <gs-col width=\"2\">\n                        <gs-link snippet=\"leaderboards_filter?action=view&shortCode={{shortCode}}\" target=\"results__main\"><i class=\"icon-edit\"/></gs-link>\n                    </gs-col>\n                </gs-row>\n            {{/if}}\n        {{/each}}\n    </gs-placeholder>\n{{else}}\n    <b>This game has no Leaderboards.</b>\n{{/if}}","groups":[""]},"newPrizeBand":{"shortCode":"newPrizeBand","name":"Race Events: New Prize Band","scriptData":"","script":"// Figure out how many we have already.\nvar numberOfTargets = 0;\nvar looping = true\n\nwhile (looping)\n{\n    if (eval(\"Spark.data.scriptData.TopTarget\" + numberOfTargets.toString()) == undefined)\n        looping = false;\n        \n    numberOfTargets++;\n}\n\n// And add the new one.\nSpark.setScriptData(\"NewItemIndex\", numberOfTargets);","template":"New Item: {{NewItemIndex}}","groups":[""]},"player_abtests":{"shortCode":"player_abtests","name":"player_abtests","scriptData":"","script":"require(\"PlayerDataUtilities\");\n\nSpark.setScriptData(\"info\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    form.playerId = playerId;\n    \n    switch (data.action) {\n        case \"view\":\n            return view(data, player);\n        case \"submit\":\n            return submit(data, player);\n    }\n    \n    function view(data, player) {\n        var cursor = Spark.metaCollection(\"ABTests\").find(\n        {\n            // All entries\n        }, \n        {\n            // Return\n            Name: true,\n            Cohorts: true\n        });\n        \n        var abTests = [\"None\"];\n        while (cursor.hasNext()) {\n            var entry = cursor.next();\n            for (var cohort in entry.Cohorts) {\n                abTests.push(FormatString(\"{0} : {1}\", entry.Name, cohort));\n            }\n        }\n        form.ABTests = abTests;\n        \n        abTestName = player.getSegmentValue(\"ABTest\");\n        cohort = player.getSegmentValue(\"Cohort\");\n        if (abTestName === null || abTestName === undefined || \n            cohort === null || cohort === undefined) {\n                \n            form.CurrentPlayerABTest = \"None\";\n        }\n        else {\n            form.CurrentPlayerABTest = FormatString(\"{0} : {1}\", abTestName, cohort);\n        }\n        \n        return form;\n    }\n    \n    function submit(data, player) {\n        var testAndCohortStr = data.abTest;\n        if (testAndCohortStr === \"None\") {\n            player.setSegmentValue(\"ABTest\", null);\n            player.setSegmentValue(\"Cohort\", null);\n        }\n        else {\n            var split = testAndCohortStr.split(\":\");\n            if (split.length !== 2) {\n                return form;\n            }\n            var abTestName = split[0].trim();\n            var cohort = split[1].trim();\n            \n            player.setSegmentValue(\"ABTest\", abTestName);\n            player.setSegmentValue(\"Cohort\", cohort);\n        }\n        \n        form.submitSuccess = true;\n        \n        return view(data, player);\n    }\n}","template":"<gs-form snippet=\"player_abtests?action=submit&playerId={{info.playerId}}\" target=\"abtests__{{info.playerId}}\">\n\n    <gs-title-block title=\"A/B Tests\" padding=\"5\" height=\"250\">\n        \n        <gs-row>\n            <gs-col width=\"3\">\n                Current\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{info.CurrentPlayerABTest}}\" type=\"text\" required name=\"playerABTest\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            \n            <gs-col width=\"3\">\n                Set A/B Test:\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <select name=\"abTest\" required>\n                    {{#each info.ABTests}}\n                    <option value=\"{{this}}\">{{this}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Submit</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        {{#if info.submitSuccess}}\n        <gs-row>\n            <gs-col width=\"12\">\n                <gs-alert type=\"success\" message=\"Success!\"></gs-alert>\n            </gs-col>\n        </gs-row>\n        {{/if}}\n        \n    </gs-title-block>\n\n</gs-form>","groups":[""]},"leaderboards_results":{"shortCode":"leaderboards_results","name":"leaderboards_results","scriptData":"","script":"Spark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        var shortCode = data.shortCode;\n        var rank = data.rank;\n        var playerId = data.playerId;\n        var count = 50;\n        var entryCount = 0;\n        \n        var leaderboard = Spark.getLeaderboards().getLeaderboard(shortCode);\n        \n        if(leaderboard != null){\n            \n            var entryCount = leaderboard.getEntryCount();\n            var entries = null;\n        // get entries based on playerId\n        if(playerId){\n            entries = leaderboard.getEntriesFromPlayer(playerId, count);\n        } else {\n            if(!rank){\n                rank = 1;\n            }\n            entries = leaderboard.getEntries(count, rank-1);\n        }\n        \n        var leaderboardScoreFields = leaderboard.getScoreFields();\n        var scoreFields = [];\n        \n        for(var i in leaderboardScoreFields){\n            scoreFields.push({scoreField: leaderboardScoreFields[i]});\n        }\n        \n        // calculate the width , based on the number of score fields\n        if(scoreFields.length > 0){\n            var width = Math.floor(12/scoreFields.length);\n        }\n        \n        // work out the name and id of the user/team\n        var identifierName_attr = null;\n        var identifierId_attr = null;\n        \n        if(entries.hasNext()){\n            \n            var leaderboardEntries = [];\n            \n            while(entries.hasNext()){\n                var entry = entries.next();\n                \n                if(identifierId_attr == null){\n                    rank = entry.getRank();\n                    if(entry.getAttribute(\"teamId\")){\n                        identifierId_attr = \"teamId\";\n                        identifierName_attr = \"teamName\"\n                    } else {\n                        identifierId_attr = \"userId\";\n                        identifierName_attr = \"userName\"\n                    }\n                }\n                \n                leaderboardEntries.push({entry: entry});\n            }\n            \n            form.entries = leaderboardEntries;\n        }\n        \n        form.identifierId_attr = identifierId_attr;\n        form.identifierName_attr = identifierName_attr;\n        \n        form.rank = rank;\n        form.count = count;\n        form.scoreFields = scoreFields;\n        form.width = width;\n        form.hiddenId = \"hidden_\"+shortCode;\n        form.shortCode = shortCode;\n\n        }else{\n            form.partition = true;\n        }\n        \n        form.entryCount = entryCount;\n        \n        return form;\n    }\n}","template":"<gs-title-block title=\"Entry Count: {{data.entryCount}}\" padding=\"5\">\n    {{#if data.entries}}\n        <gs-row>\n            <b>\n            <gs-col width=\"1\">rank</gs-col>\n            <gs-col width=\"2\">{{data.identifierName_attr}}</gs-col>\n            <gs-col width=\"4\">\n                {{#each data.scoreFields}}\n                    <gs-col width={{../data.width}}>{{scoreField}}</gs-col>\n                {{/each}}\n            </gs-col>\n            <gs-col width=\"2\">{{data.identifierId_attr}}</gs-col>\n            <gs-col width=\"2\">when</gs-col>\n            <gs-col width=\"1\"></gs-col>\n            </b>\n        </gs-row>\n        {{#each data.entries}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"1\">{{entry.rank}}</gs-col>\n                <gs-col width=\"2\">{{ get ../data.identifierName_attr entry }}</gs-col>\n                <gs-col width=\"4\">\n                    {{#each ../data.scoreFields}}\n                    <gs-col width={{../../data.width}}>{{get scoreField ../entry}}</gs-col>\n                    {{/each}}\n                </gs-col>\n                <gs-col width=\"2\">{{ get ../data.identifierId_attr entry }}</gs-col>\n                <gs-col width=\"2\">{{entry.when}}</gs-col>\n                <gs-col width=\"1\" align=\"right\">\n                    <gs-link title=\"Delete Entry\" snippet=\"leaderboards_entry_delete?action=view&shortCode={{../data.shortCode}}&entryId={{get ../data.identifierId_attr entry}}&rank={{../rank}}\" target=\"modal-small\"><i class=\"icon-trash\"/></gs-link></gs-col>\n                </gs-col>\n            </gs-row>\n        {{/each}}\n        <gs-placeholder id={{data.hiddenId}}></gs-placeholder>\n    {{else}}\n        {{#if data.partition}}\n            Leaderboard no longer exists.\n        {{else}}\n            No results were found.\n        {{/if}}\n    {{/if}}\n</gs-title-block>","groups":[""]},"player_achievements":{"shortCode":"player_achievements","name":"player_achievements","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        // list achievements for the player\n        var listAchievementsRequest = new SparkRequests.ListAchievementsRequest();\n\n        var response = Spark.sendRequestAs(listAchievementsRequest, playerId);\n        var earnedAchievements = [];\n        var unearnedAchievements = [];\n        \n        for(var i in response.achievements){\n            \n            var achievement = response.achievements[i];\n            \n            // if the player has this achievement add it to the earnedAchievements list\n            if(achievement.earned == true){\n                earnedAchievements.push({name: achievement.name, shortCode: achievement.shortCode});\n                // else add it to the unearnedAchievements list\n            } else{\n                unearnedAchievements.push({name: achievement.name, shortCode: achievement.shortCode});\n            }\n        }\n        \n        // add the achievements to the form\n        form.earnedAchievements = earnedAchievements;\n        form.unearnedAchievements = unearnedAchievements;\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // get the achievement to add or remove\n        var addAchievement = data.unearnedAchievements;\n        var removeAchievement =data.deleteShortCode;\n        \n        // add the achievement\n        if(addAchievement != null){\n            player.addAchievement(addAchievement);\n        }\n        \n        // remove the achievement\n        if(removeAchievement != null){\n            player.removeAchievement(removeAchievement);\n        }\n        \n        // flag the form as updated\n        form.updated = true;\n    }\n}","template":"<gs-title-block title=\"Achievements\" padding=\"5\" height=\"250\">\n    <gs-form snippet=\"player_achievements?action=update&playerId={{form.playerId}}\" target=\"achievements__{{form.playerId}}\">\n        \n        <gs-row>\n            <b>\n            <gs-col width=\"10\" align=\"left\">Earned</gs-col>\n            </b>\n        </gs-row>\n        \n        {{#each form.earnedAchievements}}\n            <gs-row>\n                <gs-col width=\"10\" align=\"left\">{{name}}</gs-col>\n                <gs-col width=\"2\">\n                    <gs-link snippet=\"player_achievements?action=update&deleteShortCode={{shortCode}}&playerId={{../form.playerId}}\" target=\"achievements__{{../form.playerId}}\">\n                        <i class=\"icon-trash\"/>\n                    </gs-link>\n                </gs-col>\n            </gs-row>\n            <hr/>\n        {{/each}}\n        \n        <br/>\n        {{#if form.unearnedAchievements.length}}\n            <gs-row>\n                <b>\n                <gs-col width=\"10\" align=\"left\">Unearned</gs-col>\n                </b>\n            </gs-row>\n            <gs-row>\n                <gs-col width=\"10\">\n                    <select name=\"unearnedAchievements\" class=\"input-block-level\">\n                        {{#each form.unearnedAchievements }}\n                            <option value={{shortCode}}>{{name}}</option>\n                        {{/each}}\n                    </select> \n                </gs-col>\n                <gs-col width=\"2\">\n                    <gs-submit>\n                        <i class=\"icon-plus\"></i>\n                    </gs-submit>\n                </gs-col>\n            </gs-row>\n        {{else}}\n            <gs-row>\n                <b>\n                <gs-col width=\"10\">All Achievements Earned</gs-col>\n                </b>\n            </gs-row>\n        {{/if}}\n\n    </gs-form>\n    \n    {{#if form.updated}}\n        <gs-snippet snippet=\"player_currencies?action=view&playerId={{form.playerId}}\" target=\"currencies__{{form.playerId}}\"></gs-snippet>\n        <gs-snippet snippet=\"player_virtual_goods?action=view&playerId={{form.playerId}}\" target=\"virtual__goods__{{form.playerId}}\"></gs-snippet>\n    {{/if}}\n    \n</gs-title-block>","groups":[""]},"player_currencies":{"shortCode":"player_currencies","name":"player_currencies","scriptData":"","script":"Spark.setScriptData(\"currencies\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        // get balance for each currency\n        form.currency1 = player.getBalance1();\n        form.currency2 = player.getBalance2();\n        form.currency3 = player.getBalance3();\n        form.currency4 = player.getBalance4();\n        form.currency5 = player.getBalance5();\n        form.currency6 = player.getBalance6();\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // credit or debit ( if getDifference is negative ) the player\n        player.credit1(getDifference(player.getBalance1(), data.currency1));\n        player.credit2(getDifference(player.getBalance2(), data.currency2));\n        player.credit3(getDifference(player.getBalance3(), data.currency3));\n        player.credit4(getDifference(player.getBalance4(), data.currency4));\n        player.credit5(getDifference(player.getBalance5(), data.currency5));\n        player.credit6(getDifference(player.getBalance6(), data.currency6));\n        \n        form.updated = true;   \n    }\n    \n    // gets the difference between current balance and the one to set\n    function getDifference(balance, toSet){\n        \n        var toSetInt = parseInt(toSet);\n        return toSetInt - balance;\n    }\n}","template":"<gs-form snippet=\"player_currencies?action=update&playerId={{currencies.playerId}}\" target=\"currencies__{{currencies.playerId}}\">\n    <gs-title-block title=\"Currencies\" padding=\"5\" height=\"250\">\n        <gs-row>\n            <gs-col width=\"2\">\n                C1\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency1\" type=\"number\" min=\"0\" value=\"{{currencies.currency1}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C2\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency2\" type=\"number\" min=\"0\" value=\"{{currencies.currency2}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/>\n        <gs-row>\n            <gs-col width=\"2\">\n                C3\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency3\" type=\"number\" min=\"0\" value=\"{{currencies.currency3}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C4\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency4\" type=\"number\" min=\"0\" value=\"{{currencies.currency4}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/>        \n        <gs-row>\n            <gs-col width=\"2\">\n                C5\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency5\" type=\"number\" min=\"0\" value=\"{{currencies.currency5}}\"/>\n            </gs-col>\n            <gs-col width=\"2\">\n                C6\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency6\" type=\"number\" min=\"0\" value=\"{{currencies.currency6}}\"/>\n            </gs-col>\n        </gs-row>\n        <br/> \n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n                {{#if currencies.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n    </gs-title-block>\n</gs-form>","groups":[""]},"player_details":{"shortCode":"player_details","name":"player_details","scriptData":"{\n    \"playerId\": \"555df8211b3f58c687ede0a8\",\n    \"action\": \"view\"\n}","script":"require(\"PlayerDataUtilities\");\n\nSpark.setScriptData(\"player\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n        case \"nuke\":\n            nuke(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        form.userName = player.getUserName();\n        form.displayName = player.getDisplayName();\n        form.registrationDate = player.getCreationDate().toString();\n        form.isOnline = player.isOnline();\n        form.lastSeen = player.getLastSeen().toString();\n        form.isHidden = player.isHiddenOnLeaderboards();\n        \n        \n        // Game Center ID\n        if (player.getExternalIds().GC != null) {\n            form.GCID = player.getExternalIds().GC;\n        }\n        \n        // Google Play Games ID\n        if (player.getExternalIds().GP != null) {\n            form.GPGID = player.getExternalIds().GP;\n        }\n        \n        // Facebook ID\n        if (player.getExternalIds().FB != null) {\n            form.FBID = player.getExternalIds().FB;\n        }\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        //create a ChangeUserDetails request\n        var changeUserDetailsRequest = new SparkRequests.ChangeUserDetailsRequest();\n        \n        var newUserName = data.userName;\n        var newDisplayName = data.displayName;\n        var hidden = data.hidden;\n        \n        // check that old username doesn't match the new one\n        if(player.getUserName() != newUserName){\n        changeUserDetailsRequest.userName = newUserName;\n        }\n        \n        changeUserDetailsRequest.displayName = newDisplayName;\n        \n        var response = Spark.sendRequestAs(changeUserDetailsRequest, playerId);\n        \n        // if ChangeUserDetails response contained an error\n        if(response.error != null){\n            form.error = JSON.stringify(response.error);\n        } else{\n            // set leaderboard visibility for the player\n            if(hidden == \"on\"){\n                player.hideOnLeaderboards();\n            } else{\n                player.showOnLeaderboards();\n            }\n            \n            form.success = true;\n        }\n        \n        form.updated = true;   \n    }\n    \n    function nuke(data){\n        // Compare the user ID with what was entered into the nuke box.\n        if (data.playerId === data.nukeConfirmation)\n        {\n            NukePlayerProfile(data.playerId);\n            form.success = true;\n        }\n        else\n        {\n            form.success = false;\n            form.error = \"The text in the nuke box doesn't match the user's ID.\"\n        }\n        \n        form.nuked = true;\n    }\n}","template":"<gs-form snippet=\"player_details?action=update&playerId={{player.playerId}}\" target=\"details__{{player.playerId}}\">\n    <gs-title-block title=\"Player Details\" padding=\"5\" height=\"250\">\n        {{#if player.isOnline}}\n            <p class=\"alert alert-success\">{{player.displayName}} is online.</p>\n        {{else}}\n            <p class=\"alert alert-error\">{{player.displayName}} is offline.</p>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                ID\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.playerId}}\" type=\"text\" required name=\"playerId\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                User Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.userName}}\" type=\"text\" required name=\"userName\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Display Name\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.displayName}}\" type=\"text\" required name=\"displayName\"/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Time Registered\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.registrationDate}}\" type=\"text\" name=\"registrationDate\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Last Login\n            </gs-col>\n            <gs-col width=\"8\">\n                <input value=\"{{player.lastSeen}}\" type=\"text\" name=\"lastSeen\" disabled/>\n            </gs-col>\n        </gs-row>\n        \n        {{#if player.GCID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Game Center ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.GCID}}\" type=\"text\" required name=\"GCID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        \n        {{#if player.GPGID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Google Play Games ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.GPGID}}\" type=\"text\" required name=\"GPGID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        \n        {{#if player.FBID}}\n            <gs-row>\n                <gs-col width=\"4\">\n                    Bookface ID\n                </gs-col>\n                <gs-col width=\"8\">\n                    <input value=\"{{player.FBID}}\" type=\"text\" required name=\"FBID\" disabled/>\n                </gs-col>\n            </gs-row>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                Hide On Leaderboards\n            </gs-col>\n            <gs-col width=\"8\">\n                <input rel=\"confirm-check\" type=\"checkbox\" name=\"hidden\" id=\"hidden\" class=\"checky\" {{#compare player.isHidden \"==\" true}}checked{{/compare}} />\n    \t\t\t<label for=\"hidden\" class=\"checky\"><span></span></label>\n            </gs-col>\n        </gs-row>\n        <br/>\n        \n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n            {{#if player.updated}}\n                {{#if player.success}}\n                    <gs-alert type=\"success\" message=\"Saved!\"></gs-alert>\n                {{else}}\n                    <gs-alert type=\"error\" message=\"{{error}}\"></gs-alert>\n                {{/if}}\n            {{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        <br/>\n        \n        <center><h5>&#9762; Profile Nuke &#9762;</h5></center>\n        <!--GameSparks seemingly ignores the rules of HTML and makes ALL-->\n        <!--text stretch for infinity instead of wrapping it, regardless-->\n        <!--of whether you put it in a gs-col or paragraph with a style-->\n        <!--or whatever.-->\n        <!--AND it looks different than in the editor...-->\n        <center>To reset this user's profile, copy the user's ID into the box as<br/>\n        confirmation, then hit the Nuke Profile button.</center><br/>\n        \n        <gs-row>\n            <gs-col width=\"2\">\n            </gs-col>\n            <gs-col width=\"5\">\n                <input type=\"text\" name=\"nukeConfirmation\"/>\n            </gs-col>\n            <gs-col width=\"3\">\n                <gs-submit snippet=\"player_details?action=nuke&playerId={{player.playerId}}\">\n                    <font color=\"red\"><b>Nuke Profile</b></font>\n                </gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        {{#if player.nuked}}\n            {{#if player.success}}\n                <gs-alert type=\"success\" message=\"BOOM: {{player.playerId}} was nuked.\"></gs-alert>\n            {{else}}\n                <gs-alert type=\"error\" message=\"{{player.error}}\"></gs-alert>\n            {{/if}}\n        {{/if}}\n\n    </gs-title-block>\n</gs-form>","groups":[""]},"player_cars":{"shortCode":"player_cars","name":"player_cars","scriptData":"{\n    \"playerId\": \"555df8211b3f58c687ede0a8\",\n    \"action\": \"view\"\n}","script":"Spark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        // Get the player's car list.\n        var profile = Spark.runtimeCollection(\"PlayerProfile\").findOne({\"_id\": {\"$oid\": playerId}});\n        var carArray = profile.cars;\n        \n        // Get the player's blueprint list.\n        var blueprintArray = profile.blueprints;\n        \n        form.carCount = carArray.length;\n        form.carArray = carArray;\n        form.blueprintCount = 0; //blueprintArray.length;\n        form.blueprintArray = blueprintArray;\n        return form;\n    }\n    \n    function update(data){\n        // Save the car list back to the database.\n        \n        form.updated = true;   \n    }\n}","template":"<gs-form snippet=\"player_cars?action=update&playerId={{data.playerId}}\" target=\"currencies__{{data.playerId}}\">\n    <gs-title-block title=\"Cars ({{data.carCount}} Owned, {{data.blueprintCount}} Blueprints)\" padding=\"10\" height=\"250\">\n    \n        {{#each data.carArray}}\n        <gs-row>\n            <gs-title-block title={{CarVariantID}} padding=\"5\">\n                {{#compare 1 \"==\" 2}}\n                <gs-row>Ofc</gs-row>\n                {{/compare}}\n                <gs-row>\n                    <!-- Show the durability and max durability. -->\n                    <gs-col width=\"4\">\n                        Laps Remaining\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input name=\"{{CarVariantID}}__Durability\" type=\"number\" min=\"0\" max={{Status.MaxDurability}} value=\"{{Status.Durability}}\"/>\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"left\">\n                        (Maximum {{Status.MaxDurability}})\n                    </gs-col>\n                </gs-row>\n                <gs-row>\n                    <!-- Show the percentage owned. -->\n                    <gs-col width=\"4\">\n                        Percentage Owned\n                    </gs-col>\n                    <gs-col width=\"2\">\n                        <input name=\"{{CarVariantID}}__PercentageOwned\" type=\"number\" min=\"0\" max=\"100\" step=\"10\" value=\"{{Status.PercentageOwned}}\"/>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n        </gs-row>\n        {{/each}}\n        \n        <gs-row>\n            <gs-col width=\"7\" offset=\"1\">\n                {{#if data.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n            </gs-col>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n    </gs-title-block>\n</gs-form>\n\n","groups":[""]},"player_currenciesLevels":{"shortCode":"player_currenciesLevels","name":"player_currenciesLevels","scriptData":"","script":"Spark.setScriptData(\"inventory\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data) {\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    switch (data.action) {\n        case \"updateAll\":\n            updateAll(data);\n            return view(data);\n        default:\n            return view(data);\n    }\n    \n    function view(data) {\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        // get balance for each currency\n        form.currency1 = player.getBalance1();\n        form.currency2 = player.getBalance2();\n        //form.currency3 = player.getBalance3();\n        //form.currency4 = player.getBalance4();\n        //form.currency5 = player.getBalance5();\n        form.currency6 = player.getBalance6();\n\n        form.level = player.hasVGood(\"Level\");\n        \n        return form;\n    }\n    \n    function updateAll(data) {\n        \n        try {\n            // credit or debit ( if getDifference is negative ) the player\n            var cashDiff = data.currency1 - player.getBalance1();\n            if (cashDiff > 0) {\n                player.credit1(cashDiff);\n            }\n            else {\n                player.debit1(Math.abs(cashDiff));\n            }\n            \n            var goldDiff = data.currency2 - player.getBalance2();\n            if (goldDiff > 0) {\n                player.credit2(goldDiff);\n            }\n            else {\n                player.debit2(Math.abs(goldDiff));\n            }\n    \n            //player.credit3(getDifference(player.getBalance3(), data.currency3));\n            //player.credit4(getDifference(player.getBalance4(), data.currency4));\n            //player.credit5(getDifference(player.getBalance5(), data.currency5));\n            \n            var xpDiff = data.currency6 - player.getBalance6();\n            if (xpDiff > 0) {\n                player.credit6(xpDiff);\n            }\n            else {\n                player.debit6(Math.abs(xpDiff));\n            }\n            \n            var currentLevel = player.hasVGood(\"Level\");\n            var newLevel = data.level;\n            if (currentLevel < newLevel) {\n                var diff = newLevel - currentLevel;\n                player.addVGood(\"Level\", diff);\n            }\n            else if (currentLevel > newLevel) {\n                var diff = currentLevel - newLevel;\n                player.useVGood(\"Level\", diff);\n            }\n            \n            form.updated = true;   \n        }\n        catch (errorMessage) {\n            form.error = true;\n            form.errorMessage = errorMessage;\n        }\n    }\n}","template":"<gs-form snippet=\"player_currenciesLevels?action=updateAll&playerId={{inventory.playerId}}\" target=\"currencies__{{inventory.playerId}}\">\n    <gs-title-block title=\"Currencies And Level\" padding=\"5\" height=\"250\">\n    \n        <gs-row>\n        \n            <gs-col width=\"2\">\n                Cash\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency1\" type=\"number\" min=\"0\" value=\"{{inventory.currency1}}\"/>\n            </gs-col>\n            \n            <gs-col width=\"2\">\n                Gold\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency2\" type=\"number\" min=\"0\" value=\"{{inventory.currency2}}\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"2\">\n                Level\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency5\" type=\"number\" min=\"0\" value=\"{{inventory.level}}\"/>\n            </gs-col>\n            \n            <gs-col width=\"2\">\n                XP\n            </gs-col>\n            <gs-col width=\"4\">\n                <input name=\"currency6\" type=\"number\" min=\"0\" value=\"{{inventory.currency6}}\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <br/> \n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Save Changes</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        <br/>\n        \n        <gs-row>\n            <gs-col width=\"12\">\n                {{#if inventory.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n            </gs-col>\n        </gs-row>\n        \n    </gs-title-block>\n</gs-form>","groups":[""]},"player_iap_log":{"shortCode":"player_iap_log","name":"player_iap_log","scriptData":"{\n    \"playerId\": \"55c4bf16845fb88eba4e04b7\"\n}","script":"require(\"GeneralUtilities\");\n\nSpark.setScriptData(\"log\", SnippetProcessor(Spark.getData().scriptData));\n\nfunction SnippetProcessor(data) {\n    var playerId = data.playerId;\n    \n    // Undocumented method HOOOOOOOOO!\n    var verifiedPurchaseCollection = Spark.systemCollection(\"verifiedPurchase\").find(\n    { \n        playerId: playerId \n    }\n    ).sort(\n    {\n        when: -1\n    });\n    \n    var transactionAuditCollection = Spark.systemCollection(\"playerTransactionAudit\");\n    var iapLog = [];\n    \n    // We need to match up data from verified purchases with data from the transaction audit.\n    // When GameSpacks is nice enough to respond to my message I sent about two months ago about how their currencyCode\n    // and subUnitPrice data is fucked* then we can actually display how much they spent on stuff.\n    // *not what I actually said\n    while (verifiedPurchaseCollection.hasNext()) {\n        var logEntry = {\n            transactionId: \"\",\n            productShortCode: \"\",\n            date: \"\",\n            verified: false,\n            currencyCredited: 0,\n        };\n        \n        var transaction = verifiedPurchaseCollection.next();\n        logEntry.transactionId = transaction.transactionId;\n        logEntry.productShortCode = transaction.productShortCode;\n        logEntry.date = UnixTimeToReadableString(transaction.when);\n        \n        var auditEntries = transactionAuditCollection.find(\n        { \n            playerId: playerId, \n            transactionId: {\n                \"$exists\": true\n            },\n            transactionId: transaction.transactionId \n        });\n        \n        while (auditEntries.hasNext()) {\n            var auditEntry = auditEntries.next();\n            \n            var auditCurrency = auditEntry.currency;\n            \n            if (auditCurrency !== null && auditCurrency !== undefined) {\n                var auditCurrency1 = auditCurrency.currency1;\n                var auditCurrency2 = auditCurrency.currency2;\n                \n                if (auditCurrency1 !== null && auditCurrency1 !== undefined) {\n                    logEntry.currencyCredited = auditCurrency1.amount;\n                    logEntry.currencyType = \"Cash\";\n                }\n                else if (auditCurrency2 !== null && auditCurrency2 !== undefined) {\n                    logEntry.currencyCredited = auditCurrency2.amount;\n                    logEntry.currencyType = \"Gold\";\n                }\n            }\n\n            logEntry.verified = true;\n        }\n        \n        iapLog.push(logEntry);\n    }\n    \n    return iapLog;\n}","template":"<gs-form snippet=\"player_iap_log?playerId={{info.playerId}}\" target=\"iapLog__{{info.playerId}}\">\n    <gs-title-block title=\"IAP Log\" padding=\"5\" height=\"250\">\n        <gs-row>\n            <b>\n                <gs-col width=\"3\">\n                    Transaction ID\n                </gs-col>\n                <gs-col width=\"2\">\n                    Product Shortcode\n                </gs-col>\n                <gs-col width=\"2\">\n                    Currency Credited\n                </gs-col>\n                <gs-col width=\"2\">\n                    Date\n                </gs-col>\n                <gs-col width=\"1\">\n                    Verified?\n                </gs-col>\n            </b>\n        </gs-row>\n        {{#each log}}\n        <gs-row>\n            <gs-col width=\"3\">\n                {{this.transactionId}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.productShortCode}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.currencyCredited}} {{this.currencyType}}\n            </gs-col>\n            <gs-col width=\"2\">\n                {{this.date}}\n            </gs-col>\n            <gs-col width=\"1\">\n                {{this.verified}}\n            </gs-col>\n        </gs-row>\n        {{/each}}\n    </gs-title-block>\n</gs-form>","groups":[""]},"player_master":{"shortCode":"player_master","name":"player_master","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        form.player = Spark.systemCollection(\"player\").findOne({\"_id\" : {\"$oid\" : data.playerId}}, {\"userName\" : 1, \"displayName\" : 1});\n        \n        return form;\n    }\n}\n","template":"<gs-row>\n    <gs-col width=\"12\">\n        <gs-title-block title=\"Edit Player - {{form.player.displayName}} ({{form.player._id.$oid}})\" margin=\"0\" padding=\"10\">\n            <gs-row>\n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"details__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_details?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <!--<gs-col width=\"3\">-->\n                <!--    <gs-placeholder id=\"achievements__{{form.player._id.$oid}}\">-->\n                <!--        <gs-snippet snippet=\"player_achievements?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>-->\n                <!--    </gs-placeholder>        -->\n                <!--</gs-col>-->\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"currencies__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_currenciesLevels?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"awardPrizes__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_prize_awarder?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <gs-col width=\"3\">\n                    <gs-placeholder id=\"abtests__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_abtests?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n                \n                <!--<gs-col width=\"3\">-->\n                <!--    <gs-placeholder id=\"cars__{{form.player._id.$oid}}\">-->\n                <!--        <gs-snippet snippet=\"player_cars?action=view&playerId={{form.player._id.$oid}}\"></gs-snippet>-->\n                <!--    </gs-placeholder>        -->\n                <!--</gs-col>-->\n\n            </gs-row>\n            \n            <gs-row>\n                <gs-col width=\"5\">    \n                    <gs-title-block title=\"Request Log\" margin=\"0\" padding=\"10\"  height=\"360\">\n                        <gs-chart gs_playerid=\"{{form.player._id.$oid}}\" chartType='data' pageSize='50' query='total_requests'></gs-chart>\n                    </gs-title-block>\n                </gs-col>\n                \n                <gs-col width=\"5\">\n                    <gs-placeholder id=\"iapLog__{{form.player._id.$oid}}\">\n                        <gs-snippet snippet=\"player_iap_log?playerId={{form.player._id.$oid}}\"></gs-snippet>\n                    </gs-placeholder>        \n                </gs-col>\n            </gs-row>\n            \n        </gs-title-block>\n    </gs-col>\n</gs-row>\n\n\n","groups":[""]},"player_search_results":{"shortCode":"player_search_results","name":"player_search_results","scriptData":"","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        // query from the query builder\n        var query = data.gsUserQuery;\n        \n        var playerCollection = Spark.systemCollection(\"player\");\n        // total count of players matching query\n        var count = playerCollection.count(query);\n        // limit of results returned\n        var limit = 50;\n        \n        form.count = count;\n        // find and return id, userName and displayName of the players matching query\n        form.players = playerCollection.find(query, {\"userName\" : 1, \"displayName\" : 1}).limit(limit);\n        \n        // if count is lower that the limit\n        if(count < limit){\n            form.limit = count;\n        } else{\n            form.limit = limit;\n        }\n        \n        return form;\n    }\n}","template":"<gs-title-block title=\"Results : {{results.limit}} of {{results.count}}\">\n{{#if results.players}}\n    <gs-row>\n        <b>\n        <gs-row>\n            <gs-col width=\"3\">ID</gs-col>\n            <gs-col width=\"4\">userName</gs-col>\n            <gs-col width=\"4\">displayName</gs-col>\n        </gs-row>\n        </b>\n        {{#each results.players}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"3\">{{_id.$oid}}</gs-col>\n                <gs-col width=\"4\">{{userName}}</gs-col>\n                <gs-col width=\"4\">{{displayName}}</gs-col>\n                <gs-col width=\"1\"><gs-link snippet=\"player_master?playerId={{_id.$oid}}\" target=\"modal-large\"><i class=\"icon-edit\"/></gs-link></gs-col>\n            </gs-row>\n        {{/each}}\n    </gs-row>\n{{/if}}\n</gs-title-block>","groups":[""]},"player_search":{"shortCode":"player_search","name":"player_search","scriptData":"","script":"","template":"<gs-form snippet=\"player_search_results\" target=\"player__results\">\n    <gs-snippet snippet=\"user_query\"></gs-snippet>\n        <gs-col width=\"12\">\n            <gs-submit>Submit</gs-submit>\n        </gs-col>\n</gs-form>","groups":[""]},"player_prize_awarder":{"shortCode":"player_prize_awarder","name":"player_prize_awarder","scriptData":"{\n    \"playerId\": \"555df8211b3f58c687ede0a8\",\n    \"action\": \"view\"\n}","script":"require(\"PlayerDataUtilities\");\nrequire(\"RaceEventUtilities\");\n\nSpark.setScriptData(\"info\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    \n    form.playerId = playerId;\n    \n    switch (data.action) {\n        case \"view\":\n            return view(data);\n        case \"awardPrize\":\n            return awardPrize(data, playerId);\n    }\n    \n    function view(data) {\n        // default values\n        form.eventName = \"Event Name\";\n        form.rank = 1;\n        form.cash = 0;\n        form.gold = 0;\n        form.bronzeKeys = 0;\n        form.silverKeys = 0;\n        form.goldKeys = 0;\n        form.XP = 0;\n        form.car = \"Car Variant ID\";\n        form.proPackQuantity = 0;\n        form.blueprintCar = \"Car Variant ID\";\n        form.blueprintQuantity = 0;\n        \n        // Let's make this easier for CS.\n        AddPossibleEventNamesToForm();\n        \n        // Populate manufacturers and classes lists\n        var allManufacturers = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Manufacturer\");\n        var allClasses = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Class\");\n        var allBlueprintCars = GetAllBlueprintCars();\n        \n        allManufacturers.sort();\n        allClasses.sort();\n        \n        form.manufacturers = allManufacturers;\n        form.classes = allClasses;\n        form.blueprintCars = allBlueprintCars;\n        \n        return form;\n    }\n    \n    function awardPrize(data, playerId) {\n        // Re-add all the values we just had\n        form.eventName = data.eventName;\n        form.rank = data.rank;\n        form.cash = data.cash;\n        form.gold = data.gold;\n        form.bronzeKeys = data.bronzeKeys;\n        form.silverKeys = data.silverKeys;\n        form.goldKeys = data.goldKeys;\n        form.XP = data.XP;\n        form.car = data.car;\n        form.proPackQuantity = data.proPackQuantity;\n        form.blueprintCar = data.blueprintCar;\n        form.blueprintQuantity = data.blueprintQuantity;\n        \n        // Let's make this easier for CS.\n        AddPossibleEventNamesToForm();\n        \n        var allManufacturers = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Manufacturer\");\n        var allClasses = Spark.metaCollection(\"CarModels\").distinct(\"ClientData.Class\");\n        var allBlueprintCars = GetAllBlueprintCars();\n        \n        allManufacturers.sort();\n        allClasses.sort();\n        \n        form.manufacturers = allManufacturers;\n        form.classes = allClasses;\n        form.blueprintCars = allBlueprintCars;\n        // This doesn't appear to work, not sure why :(\n        form.selectedPPManufacturer = data.ppManufacturers;\n        form.selectedPPClass = data.ppClasses;\n        form.selectedBlueprintCar = data.blueprintCar;\n        \n        var eventName = form.eventName;\n        var localisedTextTag = \"\";\n        var event = Spark.metaCollection(\"raceEvents\").findOne({\"EventName\": eventName}, \n                                        {\"_id\": 1, \"LocalisedTextTag\": 1});\n        if (event === null || event === undefined) {\n            form.eventError = true;\n            form.message = \"\\\"\" + eventName + \"\\\" is not a valid event\";\n            return form;\n        }\n        else {\n            localisedTextTag = event.LocalisedTextTag;\n        }\n        \n        var carVariantId = form.car;\n        if (carVariantId !== \"\" && carVariantId !== \"Car Variant ID\") {\n            var car = Spark.metaCollection(\"CarInventory\").findOne({\"CarVariantID\": carVariantId}, {\"_id\": 1});\n            if (car === null || car === undefined) {\n                form.carError = true;\n                form.message = \"Not a valid car variant ID\";\n                return form;\n            }\n        }\n        \n        if (data.blueprintCar !== null && data.blueprintCar !== undefined && data.blueprintCar !== \"\" && \n            data.blueprintCar !== \"None\") {\n                \n            if (form.blueprintQuantity < 1) {\n                form.blueprintCarError = true;\n                form.message = \"Quantity needed\";\n                return form;\n            }\n        }\n        \n        // Try and get a valid challenge id for a challenge instance we have been in and has finished\n        var challenge = Spark.systemCollection(\"challengeInstance\").findOne(\n            {\n                challengeName: form.eventName,\n                accepted: {\n                    \"$in\": [playerId]\n                },\n                state: {\n                    \"$in\": GetFinishedRunStatesArray()\n                }\n            },\n            {\n                _id: true\n            }\n        );\n        \n        if (challenge === null || challenge === undefined) {\n            // Couldn't find a challenge for the player that matched all the criteria,\n            // so we'll just take a challenge with the same event name that has finished\n            challenge = Spark.systemCollection(\"challengeInstance\").findOne(\n                {\n                    challengeName: form.eventName,\n                    state: {\n                        \"$in\": GetFinishedRunStatesArray()\n                    }\n                },\n                {\n                    _id: true\n                }\n            );\n        }\n        \n        var unawardedPrize = {};\n        unawardedPrize.AwardType = \"TopDown\";\n        unawardedPrize.EventName = eventName;\n        unawardedPrize.LocalisedTextTag = localisedTextTag;\n        unawardedPrize.PlayerRank = parseInt(form.rank);\n        unawardedPrize.Time = Math.floor(Date.now() / 1000);\n        \n        if (challenge !== null && challenge !== undefined) {\n            unawardedPrize.ChallengeId = challenge._id.$oid;\n        }\n        \n        var prizeBand = {};\n        prizeBand.Goal = \"FinishAtRank\";\n        prizeBand.GoalTarget = form.rank;\n        \n        var prizes = [];\n        // Cash\n        if (data.cash > 0 && data.cash !== null && data.cash !== undefined && !isNaN(data.cash)) {\n            var prize = {};\n            prize.PrizeType = \"Cash\";\n            prize.PrizeValue = data.cash;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Gold\n        if (data.gold > 0 && data.gold !== null && data.gold !== undefined && !isNaN(data.gold)) {\n            var prize = {};\n            prize.PrizeType = \"Gold\";\n            prize.PrizeValue = data.gold;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // XP\n        if (data.XP > 0 && data.XP !== null && data.XP !== undefined && !isNaN(data.XP)) {\n            var prize = {};\n            prize.PrizeType = \"XP\";\n            prize.PrizeValue = data.XP;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Bronze Keys\n        if (data.bronzeKeys > 0 && data.bronzeKeys !== null && data.bronzeKeys !== undefined && \n            !isNaN(data.bronzeKeys)) {\n                \n            var prize = {};\n            prize.PrizeType = \"BronzeKeys\";\n            prize.PrizeValue = data.bronzeKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Silver Keys\n        if (data.silverKeys > 0 && data.silverKeys !== null && data.silverKeys !== undefined && \n            !isNaN(data.silverKeys)) {\n                \n            var prize = {};\n            prize.PrizeType = \"SilverKeys\";\n            prize.PrizeValue = data.silverKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Gold Keys\n        if (data.goldKeys > 0 && data.goldKeys !== null && data.goldKeys !== undefined && !isNaN(data.goldKeys)) {\n            var prize = {};\n            prize.PrizeType = \"GoldKeys\";\n            prize.PrizeValue = data.goldKeys;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Cars\n        if (data.car !== \"\" && data.car !== \"Car Variant ID\") {\n            var prize = {};\n            prize.PrizeType = \"Car\";\n            prize.PrizeValue = data.car;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = 0;\n            prizes.push(prize);\n        }\n        // Pro Packs\n        if (data.proPackQuantity > 0 && data.proPackQuantity !== null && data.proPackQuantity !== undefined && \n            !isNaN(data.proPackQuantity)) {\n                \n            var prize = {};\n            prize.PrizeType = \"ProPack\";\n            prize.PrizeValue = data.ppManufacturers;\n            prize.PrizeClass = data.ppClasses;\n            prize.BlueprintOrProPackCount = data.proPackQuantity;\n            prizes.push(prize);\n        }\n        // Blueprints\n        if (data.blueprintQuantity > 0 && data.blueprintQuantity !== null && data.blueprintQuantity !== undefined && \n            !isNaN(data.blueprintQuantity) && \n            data.blueprintCar !== \"\" && data.blueprintCar !== \"Car Variant ID\" &&\n            data.blueprintCar !== null && data.blueprintCar !== undefined) {\n                \n            var prize = {};\n            prize.PrizeType = \"Blueprint\";\n            prize.PrizeValue = data.blueprintCar;\n            prize.PrizeClass = null;\n            prize.BlueprintOrProPackCount = parseInt(data.blueprintQuantity);\n            prizes.push(prize);\n        }\n        \n        if (prizes.length === 0) {\n            return form;\n        }\n        \n        prizeBand.Prizes = prizes;\n        unawardedPrize.PrizeBand = prizeBand;\n        \n        var versionedPrizes = GetVersionedEventPrizes(playerId);\n        var successfullyWritten = false;\n    \n        while (!successfullyWritten) {\n            var eventPrizes = versionedPrizes.GetData();\n            eventPrizes.unawarded.push(unawardedPrize);\n            successfullyWritten = versionedPrizes.SetData(eventPrizes);\n        }\n        \n        form.prizeAwarded = true;\n        \n        return form;\n    }\n    \n    function GetAllBlueprintCars() {\n        var cursor = Spark.metaCollection(\"CarInventory\").find(\n            {\n                BlueprintPiecesRequired: {\n                    $gt: 0\n                }\n            },\n            {\n                CarVariantID: true   \n            }\n        );\n        var allBlueprintCars = [];\n        if (cursor !== null && cursor !== undefined) {\n            while (cursor.hasNext()) {\n                var blueprintCar = cursor.next();\n                allBlueprintCars.push(blueprintCar.CarVariantID);\n            }\n        }\n        allBlueprintCars.sort();\n        allBlueprintCars.splice(0, 0, \"None\");\n        \n        return allBlueprintCars;\n    }\n    \n    function AddPossibleEventNamesToForm()\n    {\n        var possibleEventNames = Spark.metaCollection(\"raceEvents\").aggregate(\n            { $match: { \"LocalisedTextTag\": { $regex: \"TEXT_\" } } },\n            { $group: { _id: null, \"EventNames\": { \"$push\" : \"$EventName\"} } });\n        form.EventNames = possibleEventNames[0].EventNames;\n        form.EventNames.sort();\n    }\n}","template":"<gs-form snippet=\"player_prize_awarder?action=awardPrize&playerId={{info.playerId}}\" target=\"awardPrizes__{{info.playerId}}\">\n\n    <gs-title-block title=\"Prize Awarder\" padding=\"5\" height=\"250\">\n        \n        <gs-row>\n            \n            <gs-col width=\"3\">\n                Event Name\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <select name=\"eventName\" required>\n                    {{#each info.EventNames}}\n                    <option value=\"{{this}}\">{{this}}</option>\n                    {{/each}}\n                </select>\n                <!--<input name=\"eventName\" value=\"{{info.eventName}}\" type=\"text\" required/>-->\n            </gs-col>\n            \n        </gs-row>\n        \n        {{#if info.eventError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Rank\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"rank\" value=\"{{info.rank}}\" type=\"number\" min=\"1\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Cash\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"cash\" value=\"{{info.cash}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Gold\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"gold\" value=\"{{info.gold}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Bronze Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"bronzeKeys\" value=\"{{info.bronzeKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Silver Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"silverKeys\" value=\"{{info.silverKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Gold Keys\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"goldKeys\" value=\"{{info.goldKeys}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                XP\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"XP\" value=\"{{info.XP}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Car\n            </gs-col>\n            \n            <gs-col width=\"8\">\n                <input name=\"car\" value=\"{{info.car}}\" type=\"text\" name=\"car\"/>\n            </gs-col>\n            \n        </gs-row>\n        \n        {{#if info.carError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Pro Pack\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"ppManufacturers\" value =\"{{info.selectedPPManufacturer}}\" style=\"width:100px\">\n                    {{#each info.manufacturers}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"ppClasses\" value=\"{{info.selectedPPClass}}\" style=\"width:50px\">\n                    {{#each info.classes}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <input name=\"proPackQuantity\" value=\"{{info.proPackQuantity}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n        \n        </gs-row>\n        \n        <gs-row>\n        \n            <gs-col width=\"3\">\n                Blueprint\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <select name=\"blueprintCar\" value =\"{{info.selectedBlueprintCar}}\" style=\"width:100px\">\n                    {{#each info.blueprintCars}}\n                        <option value=\"{{.}}\">{{.}}</option>\n                    {{/each}}\n                </select>\n            </gs-col>\n            \n            <gs-col width=\"3\">\n                <input name=\"blueprintQuantity\" value=\"{{info.blueprintQuantity}}\" type=\"number\" min=\"0\"/>\n            </gs-col>\n        \n        </gs-row>\n        \n        {{#if info.blueprintCarError}}\n        <gs-row>\n        \n            <gs-col width=\"12\">\n                <gs-alert type=\"failure\" message=\"ERROR: {{info.message}}\"></gs-alert>\n            </gs-col>\n            \n        </gs-row>\n        {{/if}}\n        \n        <gs-row>\n            <gs-col width=\"4\">\n                <gs-submit>Award Prize</gs-submit>\n            </gs-col>\n        </gs-row>\n        \n        <br/>\n        \n        {{#if info.prizeAwarded}}\n        <gs-row>\n            <gs-col width=\"12\">\n                <gs-alert type=\"success\" message=\"Prize Awarded!\"></gs-alert>\n            </gs-col>\n        </gs-row>\n        {{/if}}\n        \n    </gs-title-block>\n\n</gs-form>","groups":[""]},"prizeBand":{"shortCode":"prizeBand","name":"Race Events: Prize Band","scriptData":"{\n    \"index\": 0,\n    \"type\": \"Top\",\n    \"eventId\": \"55954133e4b03d129267cf2c\",\n    \"bandTarget\": \"1234\",\n    \"bandPrizeType\": \"Test\",\n    \"bandPrizeValue\": \"1234\"\n}","script":"var prizeBandIndex = Spark.data.scriptData.index;\nvar prizeBandType = Spark.data.scriptData.type;\nvar eventId = Spark.data.scriptData.eventId;\n\nif (eventId != null)\n{\n    var selectedEvent = Spark.runtimeCollection(\"raceEvents\").findOne({\"_id\" : {$oid : eventId}});\n    var prizes;\n    \n    if (prizeBandType == \"Top\")\n        prizes = selectedEvent.TopPrizes;\n    else\n        prizes = selectedEvent.BottomPrizes;\n    \n    // If we pass in an index that's one higher than our max, we should use default values.\n    if (prizeBandIndex >= prizes.length)\n    {\n        Spark.setScriptData(\"PrizeBandIndex\", prizeBandIndex);\n        Spark.setScriptData(\"PrizeBandType\", prizeBandType);\n        Spark.setScriptData(\"PrizeTarget\", 0);\n        Spark.setScriptData(\"PrizeType\", \"Cash\");\n        Spark.setScriptData(\"PrizeValue\", 0);\n    }\n    else\n    {\n        Spark.setScriptData(\"PrizeBandIndex\", prizeBandIndex);\n        Spark.setScriptData(\"PrizeBandType\", prizeBandType);\n        Spark.setScriptData(\"PrizeTarget\", prizes[prizeBandIndex].Target);\n        Spark.setScriptData(\"PrizeType\", prizes[prizeBandIndex].TargetPrizeType);\n        Spark.setScriptData(\"PrizeValue\", prizes[prizeBandIndex].TargetPrizeValue);\n    }\n}","template":"<gs-row>\n    <gs-col width=\"3\" align=\"right\">\n    Prize Band {{#math PrizeBandIndex \"+\" 1}}{{/math}}\n    </gs-col>\n    <gs-col width=\"3\" align=\"left\">\n        <input type=\"number\" placeholder=\"\" name=\"{{PrizeBandType}}Target{{PrizeBandIndex}}\"\n               class=\"input-block-level\"\n               value={{#compare PrizeTarget \"==\" \"undefined\"}} 0\n                     {{else}} {{PrizeTarget}}\n                     {{/compare}}/>\n    </gs-col>\n    <gs-col width=\"3\" align=\"left\">\n        <select name=\"{{PrizeBandType}}TargetPrize{{PrizeBandIndex}}\" class=\"input-block-level\">\n            <option value=\"Cash\" {{#compare PrizeType \"==\" \"Cash\"}}selected{{/compare}}>Cash</option>\n            <option value=\"Creditz\" {{#compare PrizeType \"==\" \"Creditz\"}}selected{{/compare}}>Creditz</option>\n            <option value=\"Nitrous\" {{#compare PrizeType \"==\" \"Nitrous\"}}selected{{/compare}}>Nitrous</option>\n            <option value=\"Car\" {{#compare PrizeType \"==\" \"Car\"}}selected{{/compare}}>Car</option>\n        </select>\n    </gs-col>\n    <gs-col width=\"3\" align=\"left\">\n        <input type=\"text\" placeholder=\"\" name=\"{{PrizeBandType}}TargetPrizeValue{{PrizeBandIndex}}\"\n               class=\"input-block-level\"\n               value={{#compare PrizeValue \"==\" \"undefined\"}} 0\n                     {{else}} {{PrizeValue}}\n                     {{/compare}}/>\n    </gs-col>\n</gs-row>\n\n\n","groups":[""]},"player_virtual_goods":{"shortCode":"player_virtual_goods","name":"player_virtual_goods","scriptData":"","script":"Spark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    // load player for view/edit\n    var playerId = data.playerId;\n    var player = Spark.loadPlayer(playerId);\n    var listVirtualGoodsRequest = new SparkRequests.ListVirtualGoodsRequest();\n    var response = Spark.sendRequestAs(listVirtualGoodsRequest, playerId);\n    \n    switch(data.action){\n        case \"view\":\n            return view(data);\n        case \"update\":\n            update(data);\n            return view(data);\n    }\n    \n    function view(data){\n        \n        //get form data for view\n        form.playerId = playerId;\n        \n        var aggregatedVGoods = [];\n        \n        for(var i in response.virtualGoods){\n            \n            var virtualGood = response.virtualGoods[i];\n            var max = virtualGood.maxQuantity;\n            \n            // if no maxQty is set use 100\n            if(!max){\n                max = 100;\n            }\n        \n            aggregatedVGoods.push({name:virtualGood.name, shortCode:virtualGood.shortCode, owned:player.hasVGood(virtualGood.shortCode), max:max});\n        }\n\n        form.aggregatedVGoods = aggregatedVGoods;\n        \n        return form;\n    }\n    \n    function update(data){\n        \n        // check and set each virtual good\n        for(var i in response.virtualGoods){\n            \n            var virtualGood = response.virtualGoods[i].shortCode;\n            \n            if(data[virtualGood]){\n                setVGoods(virtualGood, player.hasVGood(virtualGood), data[virtualGood]);\n            }\n        }\n        form.updated = true;\n    }\n    \n    \n    // gets the difference between owned and new virtual goods\n    // then adds or removes accordingly\n    function setVGoods(shortCode, owned, toSet){\n        \n        var toSetInt = parseInt(toSet);\n        \n        if(toSetInt > owned){\n            \n            var toAdd = toSetInt-owned;\n            player.addVGood(shortCode, toAdd);\n            \n        } else if(toSetInt < owned){\n            \n            var toRemove = owned-toSetInt;\n            player.useVGood(shortCode, toRemove);\n        }\n    }\n}","template":"<gs-form snippet=\"player_virtual_goods?action=update&playerId={{form.playerId}}\" target=\"virtual__goods__{{form.playerId}}\">\n    <gs-title-block title=\"Virtual Goods\" padding=\"5\" height=\"250\">\n        {{#if form.aggregatedVGoods}}\n            {{#each form.aggregatedVGoods}}\n                <gs-row>\n                    <gs-col width=\"5\">{{name}}</gs-col>\n                    <gs-col width=\"7\"><input name={{shortCode}} type=\"number\" min=\"0\" max=\"{{max}}\" value=\"{{owned}}\"/></gs-col>\n                </gs-row>\n                <br/>\n            {{/each}}\n            <gs-row>\n                <gs-col width=\"7\" offset=\"1\">\n                    {{#if form.updated}}<gs-alert type=\"success\" message=\"Saved!\"></gs-alert>{{/if}}\n                </gs-col>\n                <gs-col width=\"4\">\n                    <gs-submit>Save Changes</gs-submit>\n                </gs-col>\n            </gs-row>\n        {{else}}\n            <gs-row>\n                <b>The game doesn't have any Virtual Goods.</b>\n            </gs-row>\n        {{/if}}\n    </gs-title-block>\n</gs-form>","groups":[""]},"raceEventsExpired":{"shortCode":"raceEventsExpired","name":"Race Events: Expired Events","scriptData":"","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data)\n{\n    var eventList = {}\n    \n    var eventCollection = Spark.runtimeCollection(\"raceEvents\");\n    eventList.expiredEvents = eventCollection.find({\"Expired\": true});\n    eventList.count = eventList.expiredEvents.count();\n    \n    return eventList;\n}","template":"{{#if results.count}}\n    <gs-row>\n        <gs-col width=\"5\" align=\"left\">\n            <b>Event Name</b>\n        </gs-col>\n        <gs-col width=\"2\">\n            <b>Event Type</b>\n        </gs-col>\n        <gs-col width=\"4\">\n            <b>ID</b>\n        </gs-col>\n    </gs-row>\n    {{#each results.expiredEvents}}\n        <gs-row>\n            <hr/>\n            <gs-row>\n                <gs-col width=\"5\" align=\"left\">{{EventName}}</gs-col>\n                <gs-col width=\"2\">{{EventType}}</gs-col>\n                <gs-col width=\"4\">{{_id.$oid}}</gs-col>\n                <gs-col width=\"1\">\n                    <gs-link snippet=\"displayRaceEvent?eventId={{_id.$oid}}\" target=\"ph_selectedEventInfo\"><i class=\"icon-chevron-right\"/></gs-link>\n                </gs-col>\n            </gs-row>\n        </gs-row>\n    {{/each}}\n{{else}}\n    <b>There are no expired race events!</b>\n    <br/>\n{{/if}}","groups":[""]},"script_log_level":{"shortCode":"script_log_level","name":"script_log_level","scriptData":"","script":"\nSpark.setScriptData(\"form\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    var form = {};\n    if(data.action === \"update\"){\n        return update(form, data);\n    }\n    return view(form, data);\n    \n    function update(form, data){\n        if(data.level){\n            Spark.getLog().setLevel(data.level);\n            form.updated = true;\n        }\n        return view(form, data);\n    }\n    \n    function view(form, data){\n        form.levels = [\"ERROR\", \"WARN\", \"INFO\", \"DEBUG\"];\n        form.current = Spark.getLog().getLevel();\n        return form;\n    }\n}\n","template":"{{#if form.updated}}\n    <gs-modal-close></gs-modal-close>\n{{else}}\n    <gs-row>\n        <gs-form snippet=\"script_log_level?action=update\" target=\"level_form\">\n            <gs-title-block title=\"Script Log Level\" padding=\"10\" margin=\"0\">\n                <gs-row>\n                    <gs-col width=\"4\" align=\"left\">\n                        Current log level:\n                    </gs-col>\n                    <gs-col width=\"4\" >\n                        <select name=\"level\" class=\"input-block-level\">\n                            {{#each form.levels}}\n                                <option value='{{this}}' {{#compare this '===' ../form.current}}selected{{/compare}}>{{this}}</option>\n                            {{/each}}\n                        </select>\n                    </gs-col>\n                    <gs-col width=\"4\" align=\"right\">\n                        <gs-submit>Update</gs-submit>\n                    </gs-col>\n                </gs-row>\n            </gs-title-block>\n        </gs-form>\n    </gs-row>\n{{/if}}","groups":[""]},"raceEventsMainMenu":{"shortCode":"raceEventsMainMenu","name":"Race Events: Main Menu","scriptData":"","script":"Spark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data)\n{\n    var results = {}\n    \n    var eventCollection = Spark.runtimeCollection(\"raceEvents\");\n    //results.events =   eventCollection.find({}).sort({\"_id\": 1});\n    results.events = eventCollection.find({ \"Expired\": false }).sort({ \"_id\": 1 });\n    results.eventCount = results.events.count();\n    \n    return results;\n}\n\nfunction ShortcodeExists()\n{\n    \n}","template":"{{#if results.eventCount}}\n    <gs-row>\n        <gs-col width=\"5\" align=\"left\">\n            <b>Event Name</b>\n        </gs-col>\n        <gs-col width=\"2\">\n            <b>Event Type</b>\n        </gs-col>\n        <gs-col width=\"1\">\n            <b>Repeats</b>\n        </gs-col>\n        <gs-col width=\"3\">\n            <b>ID</b>\n        </gs-col>\n    </gs-row>\n    {{#each results.events}}\n        <gs-row>\n            <hr/>\n            <gs-row>\n                <gs-col width=\"5\" align=\"left\">{{EventName}}</gs-col>\n                <gs-col width=\"2\">{{EventType}}</gs-col>\n                <gs-col width=\"1\">{{#compare AlwaysActive \"==\" true}}&nbsp;&nbsp;<i class=\"icon-refresh\"/>{{/compare}}</gs-col>\n                <gs-col width=\"3\">{{_id.$oid}}</gs-col>\n                <gs-col width=\"1\">\n                    <gs-link snippet=\"displayRaceEvent?eventId={{_id.$oid}}\" target=\"ph_selectedEventInfo\"><i class=\"icon-chevron-right\"/></gs-link>\n                </gs-col>\n            </gs-row>\n        </gs-row>\n    {{/each}}\n{{else}}\n    <b>There are no active race events!</b>\n    <br/>\n{{/if}}\n\n<hr/>\n<br/>\n\n<gs-col width=\"5\" align=\"left\">\n    <gs-form snippet=\"createRaceEvent\" target=\"ph_raceEventsMainMenu\">\n        <gs-submit><i class=\"icon-plus\"/> <b>Create Event</b></gs-submit>\n    </gs-form>\n</gs-col>\n","groups":[]},"serverClockMainPage":{"shortCode":"serverClockMainPage","name":"Server Clock Main Page","scriptData":"","script":"requireOnce(\"TimeUtilities\");\nrequireOnce(\"GeneralUtilities\");\n\nSpark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    data.submitted = false;\n    data.reset = false;\n    var now = Date.now();\n            \n    switch (data.action) {\n        case \"enter\":\n            // Blank\n            break;\n        case \"submit\":\n            if (data.epochNow === \"\") {\n                // Set offset\n                data = SetServerClockOffset(data);\n            }\n            else {\n                // Set 'now'\n                data = SetServerClockNow(now, data);\n            }\n            break;\n    }\n    \n    data.now = now;\n    data.serverClockNow = GetNow();\n    data.nowISO = new Date(now).toISOString();\n    data.serverClockNowISO = new Date(GetNow()).toISOString();\n    var diffDate = new Date(GetNow() - now);\n    data.difference = CalculateDifference(GetNow(), now);\n    \n    function SetServerClockNow(now, data) {\n        var serverClockNow = data.epochNow;\n        \n        if (serverClockNow < 0 || serverClockNow === null || serverClockNow === undefined || \n            serverClockNow === \"\" || isNaN(serverClockNow)) {\n                \n            SetServerTimeOffset(0);\n            data.reset = true;\n            Spark.getLog().info(FormatString(\n                \"SERVER CLOCK: Reset server clock fudge to 0, now is {0} [{1}]\", \n                now,\n                new Date(now).toISOString()));\n        }\n        else {\n            var str = serverClockNow.toString();\n            //Spark.getLog().info(FormatString(\"submitted as str {0}\", str));\n            while(str.length < 13) {\n                str += \"0\";\n            }\n            //Spark.getLog().info(FormatString(\"padded str {0}\", str));\n            serverClockNow = parseInt(str);\n            //Spark.getLog().info(FormatString(\"padded num {0}\", serverClockNow));\n        \n            SetNow(serverClockNow);\n            data.submitted = true;\n            Spark.getLog().info(FormatString(\n                \"SERVER CLOCK: Actual now {0} [{1}], new now {2} [{3}], diff {4}ms\", \n                now,\n                new Date(now).toISOString(),\n                GetNow(),\n                new Date(GetNow()).toISOString(),\n                GetNow() - now));\n        }\n        \n        return data;\n    }\n    \n    function SetServerClockOffset(data) {\n        var offsetDays = data.offsetDays;\n        var offsetHours = data.offsetHours;\n        var offsetMinutes = data.offsetMinutes;\n        var offsetSeconds = data.offsetSeconds;\n        \n        //Spark.getLog().info(FormatString(\"offsetDays {0} offsetHours {1} offsetMinutes {2} offsetSeconds {3}\", \n        //    offsetDays, offsetHours, offsetMinutes, offsetSeconds));\n        \n        var totalOffset = 0;\n        totalOffset += (IsValid(offsetSeconds)  ? offsetSeconds : 0)    * 1000;\n        totalOffset += (IsValid(offsetMinutes)  ? offsetMinutes : 0)    * 1000 * 60;\n        totalOffset += (IsValid(offsetHours)    ? offsetHours   : 0)    * 1000 * 60 * 60;\n        totalOffset += (IsValid(offsetDays)     ? offsetDays    : 0)    * 1000 * 60 * 60 * 24;\n        \n        var currentServerClock = GetNow();\n        SetNow(currentServerClock + totalOffset);\n        \n        data.submitted = true;\n        \n        return data;\n    }\n    \n    function IsValid(number) {\n        return (number !== null && number !== undefined && number !== \"\" && !isNaN(number));\n    }\n    \n    function CalculateDifference(serverClock, unix) {\n        var diffMs = Math.abs(serverClock - unix);\n        var behind = (serverClock < unix);\n        var diffDays = Math.floor(diffMs / 1000 / 60 / 60 / 24).toFixed(0);\n        var diffHours = Math.floor(diffMs / 1000 / 60 / 60).toFixed(0) % 24;\n        var diffMinutes = Math.floor(diffMs / 1000 / 60).toFixed(0) % 60;\n        var diffSeconds = Math.floor(diffMs / 1000).toFixed(0) % 60;\n        return FormatString(\"{0} Day{1}   {2} Hour{3}   {4} Minute{5}   {6} Second{7} {8}\",\n                            diffDays, \n                            (diffDays > 1) ? \"s\" : \"\",\n                            diffHours, \n                            (diffHours > 1) ? \"s\" : \"\",\n                            diffMinutes, \n                            (diffMinutes > 1) ? \"s\" : \"\",\n                            diffSeconds,\n                            (diffSeconds > 1) ? \"s\" : \"\",\n                            (behind) ? \"Behind\" : \"Ahead\");\n    }\n    \n    return data;\n}","template":"<gs-form snippet=\"serverClockMainPage?action=submit\" target=\"ph_serverClockMainPage\">\n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            http://www.epochconverter.com\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Actual Now: {{data.now}} [{{data.nowISO}}]\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Server Clock Now: {{data.serverClockNow}} [{{data.serverClockNowISO}}]\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Server Clock is: {{data.difference}}\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Add a Unix timestamp in milliseconds to set the current 'now' time.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Numbers less than 13 digits will be padded with zeros.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Submit '-1' to reset back to actual Unix time.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"5\">\n            <input name=\"epochNow\" type=\"number\" min=\"-1\" value={{data.epochNow}}/>\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Increase the offset in exact increments using the inputs below.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col width=\"1\">\n            Days\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetDays\" type=\"number\" value={{data.offsetDays}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Hours\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetHours\" type=\"number\" value={{data.offsetHours}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Minutes\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetMinutes\" type=\"number\" value={{data.offsetMinutes}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Seconds\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetSeconds\" type=\"number\" value={{data.offsetSeconds}}/>\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\">\n            <gs-submit>Submit</gs-submit>\n        </gs-col>\n\n        {{#if data.submitted}}\n            <gs-col width=\"2\">\n                <gs-alert type=\"success\" message=\"Submitted\">\n            </gs-col>\n        {{/if}}\n        \n        {{#if data.reset}}\n            <gs-col width=\"2\">\n                <gs-alert type=\"success\" message=\"Reset\">\n            <gs-col>\n        {{/if}}\n    </gs-row>\n    \n</gs-form>","groups":[""]},"script_log_search_results":{"shortCode":"script_log_search_results","name":"script_log_search_results","scriptData":"","script":"\n\n \nSpark.setScriptData(\"results\", SnippetProcessor(Spark.getData().scriptData))\n \nfunction SnippetProcessor(data){\n    \n    var query = data.query;\n    var logs = Spark.runtimeCollection(\"log\");\n    var limit = 50;\n    \n    var entries = logs.find(query).limit(limit).sort({ts : -1});\n    \n    var count = entries.count();\n    if(count < limit){\n        limit = count;\n    }\n    \n    return {\n        query : query,\n        count : count,\n        limit : limit,\n        entries : entries\n    };\n}","template":"<gs-title-block title=\"Results : {{results.limit}} of {{results.count}}\">\n{{#if results.entries}}\n    <gs-row>\n        <b>\n        <gs-row>\n            <gs-col width=\"2\">Timestamp</gs-col>\n            <gs-col width=\"1\">Level</gs-col>\n            <gs-col width=\"2\">Script</gs-col>\n            <gs-col width=\"2\">Player ID</gs-col>\n            <gs-col width=\"5\" align=\"left\">Log</gs-col>\n        </gs-row>\n        </b>\n        {{#each results.entries}}\n            <hr/>\n            <gs-row>\n                <gs-col width=\"2\" >{{ts.$date}}</gs-col>\n                <gs-col width=\"1\" >{{level}}</gs-col>\n                <gs-col width=\"2\" >{{script}}</gs-col>\n                <gs-col width=\"2\">{{playerId}}</gs-col>\n                <gs-col width=\"5\" align=\"left\">{{json this.log}}</gs-col>\n            </gs-row>\n        {{/each}}\n    </gs-row>\n{{/if}}\n</gs-title-block>","groups":[""]},"script_log_query":{"shortCode":"script_log_query","name":"script_log_query","scriptData":"","script":"\nSpark.setScriptData(\"query\", { scripts : Spark.getConfig().getScriptNames() } );","template":"<gs-query name=\"query\">\n    \n    <gs-query-field id=\"level\" \n                    label=\"Level\" \n                    type='string'\n                    values='{\"FATAL\" : \"Fatal\", \"ERROR\" : \"Error\", \"WARN\" : \"Warn\", \"INFO\" : \"Info\", \"DEBUG\" : \"Debug\"}'/>\n \n \n    {{#if query.scripts}}\n        <gs-query-field id=\"script\" \n                        label=\"Script\"\n                        type='string'\n                        values='{ {{#each query.scripts}}\"{{this}}\":\"{{this}}\" {{#unless @last}},{{/unless}} {{/each}} }'/>\n    {{/if}}\n    \n    <gs-query-field id=\"playerId\" \n                    label=\"Player ID\" \n                    type=\"string\"/>\n \n    <gs-query-field id='ts' \n                    label='Timestamp' \n                    type='datetime'/>\n    \n</gs-query>","groups":[""]},"showTopDownPrizeBands":{"shortCode":"showTopDownPrizeBands","name":"Race Events: Show Top Down Prize Bands","scriptData":"{\n    \"eventId\": \"55954133e4b03d129267cf2c\",\n    \"addNew\": \"yep\"\n}","script":"var eventId = Spark.data.scriptData.eventId;\n\nif (eventId != null)\n{\n    var selectedEvent = Spark.runtimeCollection(\"raceEvents\").findOne({\"_id\" : {$oid : eventId}});\n    Spark.setScriptData(\"EventId\", eventId);\n    Spark.setScriptData(\"SelectedEventPrizes\", selectedEvent.TopPrizes);\n    \n    if (Spark.data.scriptData.addNew != null)\n    {\n        // Get additional prize bands that are in the form but not in the runtime collection.\n        var additionalTargets = [];\n        var numberOfAdditionalPrizes = 0;\n        var looping = true;\n    \n        while (looping)\n        {\n            var target = (selectedEvent.TopPrizes.length - 1 + numberOfAdditionalPrizes);\n            var newPrize = { Target: eval(\"Spark.data.scriptData.BottomTarget\" + target.toString()),\n                             TargetPrizeType: eval(\"Spark.data.scriptData.BottomTargetPrize\" + target.toString()),\n                             TargetPrizeValue: eval(\"Spark.data.scriptData.BottomTargetPrizeValue\" + target.toString()) };\n            \n            if (newPrize.Target == undefined ||\n                newPrize.TargetPrizeType == undefined ||\n                newPrize.TargetPrizeValue == undefined)\n            {\n                looping = false;\n            }\n            else\n            {\n                additionalTargets.push(newPrize);\n                numberOfAdditionalPrizes++;\n            }\n        }\n        \n        // Pass them into HTML so they can be rendered.\n        Spark.setScriptData(\"AdditionalEventPrizes\", additionalTargets);\n        \n        // And add the new one.\n        Spark.setScriptData(\"AdditionalStartIndex\", selectedEvent.TopPrizes.length);\n        Spark.setScriptData(\"NewItemIndex\", (numberOfAdditionalPrizes + selectedEvent.TopPrizes.length));\n        Spark.setScriptData(\"AddNew\", Spark.data.scriptData.addNew);\n    }\n}\n","template":"<gs-placeholder id=\"ph_topDownPrizeBands\">\n    <!--In RtC: {{SelectedEventPrizes.length}}<br>-->\n    {{#each SelectedEventPrizes}}\n        <gs-snippet snippet=\"prizeBand?index={{@index}}&type=Top&eventId={{../EventId}}&\n                             bandTarget={{Target}}&bandPrizeType={{TargetPrizeType}}&\n                             bandPrizeValue={{TargetPrizeValue}}\"></gs-snippet>\n    {{/each}}\n    \n    <!--On Form: {{AdditionalEventPrizes.length}}<br>-->\n    {{#each AdditionalEventPrizes}}\n        index: {{AdditionalStartIndex}}\n        <gs-snippet snippet=\"prizeBand?index={{AdditionalStartIndex}}&type=Top&eventId={{../EventId}}&\n                             bandTarget={{Target}}&bandPrizeType={{TargetPrizeType}}&\n                             bandPrizeValue={{TargetPrizeValue}}\"></gs-snippet>\n    {{/each}}\n    \n    {{#if AddNew}}\n        <!--New Item Index: {{NewItemIndex}} <br>-->\n        <gs-snippet snippet=\"prizeBand?index={{NewItemIndex}}&type=Top&eventId={{../EventId}}&\n                             bandTarget=0&bandPrizeType=Cash&bandPrizeValue=0\"></gs-snippet>\n    {{/if}}\n</gs-placeholder>","groups":[""]},"snippetTest":{"shortCode":"snippetTest","name":"Race Events: Snippet Test","scriptData":"{}","script":"","template":"Literally no reason why this won't show up.","groups":[""]},"updateRaceEvent":{"shortCode":"updateRaceEvent","name":"Race Events: Update Event","scriptData":"","script":"var queriedEventId = Spark.data.scriptData.eventId;\nvar eventCollection = Spark.runtimeCollection(\"raceEvents\");\nvar currentEvent = eventCollection.findOne({\"_id\": { \"$oid\": queriedEventId}});\n\n// Checkboxes are either \"on\" or \"undefined\".\n// AAAAARGH why can't it just be \"true\" or \"false\"?!\nvar VisibleIfIneligible = false;\nvar DebugEvent = false;\nvar AlwaysActive = false;\nvar IsSlam = false;\nvar EventExpired = false;\n\nif (Spark.data.scriptData.VisibleIfIneligible === \"on\")\n    VisibleIfIneligible = true;\nif (Spark.data.scriptData.DebugEvent === \"on\")\n    DebugEvent = true;\nif (Spark.data.scriptData.AlwaysActive === \"on\")\n    AlwaysActive = true;\nif (Spark.data.scriptData.IsSlam === \"on\")\n    IsSlam = true;\nif (Spark.data.scriptData.Expired === \"on\")\n    EventExpired = true;\n\n// Restrictions.\n// GameSparks just keeps on sucking. If you give multiple checkboxes the\n// same name, submitting the form normally returns all the values you\n// selected. GameSparks doesn't. It only returns the first value.\n// Hurrrrr...\nvar ClassRestrictions = [];\nif (Spark.data.scriptData.ClassRestrictionS) { ClassRestrictions.push(\"S\") };\nif (Spark.data.scriptData.ClassRestrictionA) { ClassRestrictions.push(\"A\") };\nif (Spark.data.scriptData.ClassRestrictionB) { ClassRestrictions.push(\"B\") };\nif (Spark.data.scriptData.ClassRestrictionC) { ClassRestrictions.push(\"C\") };\n\nvar CarRestrictions = [];\nif (Spark.data.scriptData.CarRestrictions.trim().length > 0)\n    CarRestrictions = Spark.data.scriptData.CarRestrictions.split(\", \");\n\nvar ManufacturerRestrictions = [];\nif (Spark.data.scriptData.ManufacturerRestrictions.trim().length > 0)\n    ManufacturerRestrictions = Spark.data.scriptData.ManufacturerRestrictions.split(\", \");\n\nvar BalanceRestriction = Spark.data.scriptData.BalanceRestriction;\nif (BalanceRestriction != null && BalanceRestriction != \"\")\n    BalanceRestriction = parseInt(BalanceRestriction);\nelse BalanceRestriction = 0;\n\nvar Restrictions = { Class: ClassRestrictions,\n                     Car: CarRestrictions,\n                     Manufacturer: ManufacturerRestrictions,\n                     Balance: BalanceRestriction };\n\n// League Duration.\n// GameSparks, entertainingly, stores values from a \"number\" field as strings. You'll need to use\n// parseInt() to convert them to doubles. Yes, not ints. Doubles. Be super-careful you don't try to\n// parse nulls or anything like that though cuz if you somehow manage to get a NaN in the runtime\n// collection it completely fails to retrieve any element of the collection until you remove the entry\n// manually. Nope, no error logging or useful error message.\n// Such lel.\n// It's in minutes, by the way.\nvar LeagueDurationDays = Spark.data.scriptData.LeagueDurationD;\nif (LeagueDurationDays != null && LeagueDurationDays != \"\")\n    LeagueDurationDays = parseInt(LeagueDurationDays);\nelse\n    LeagueDurationDays = 1;\n    \nvar LeagueDurationHours = Spark.data.scriptData.LeagueDurationH;\nif (LeagueDurationHours != null && LeagueDurationHours != \"\")\n    LeagueDurationHours = parseInt(LeagueDurationHours);\nelse\n    LeagueDurationHours = 0;\n    \nvar LeagueDurationMinutes = Spark.data.scriptData.LeagueDurationM;\nif (LeagueDurationMinutes != null && LeagueDurationMinutes != \"\")\n    LeagueDurationMinutes = parseInt(LeagueDurationMinutes);\nelse\n    LeagueDurationMinutes = 0;\n    \nvar LeagueDurationTotalMinutes = (LeagueDurationDays * 1440) + (LeagueDurationHours * 60) + LeagueDurationMinutes;\n\n// Dates.\n// Also, gotta convert and store our dates as Epoch so we can use proper MongoDB queries.\n// Arrrggh! Date.parse() doesn't fucking recognise ISO-8601 format! The same format\n// used by the friggin' date fields in the form! Oh, and in addition, GameSparks'\n// Epoch times are in MILLISECONDS!\n// MORE GAMESPARKS WORKAROUND SHIT YAAAAAY!\nvar StartDateAsEpoch = 0;\nvar EndDateAsEpoch = (Date.now() / 1000) + 86400;\nif (Spark.data.scriptData.StartDate != null)\n{\n    var RecognizableStartDate = Spark.data.scriptData.StartDate.replace(/-/g, \"/\").replace(\"T\", \" \");\n    StartDateAsEpoch = Date.parse(RecognizableStartDate) / 1000;\n}\nif (Spark.data.scriptData.EndDate != null)\n{\n    var RecognizableEndDate = Spark.data.scriptData.EndDate.replace(/-/g, \"/\").replace(\"T\", \" \");\n    EndDateAsEpoch = Date.parse(RecognizableEndDate) / 1000;\n}\nif (AlwaysActive)\n{\n    EndDateAsEpoch = StartDateAsEpoch + (LeagueDurationTotalMinutes * 60);\n}\n\n// If we change the event's AlwaysActive state, we need to make sure the event's times are\n// changed to prevent the event from ending immediately.\n// For example, the default value for event duration is 24 hours. Suddenly making the event\n// always active will make the event expire if the start date is at least 24 hours in the past.\nif (currentEvent.AlwaysActive != AlwaysActive)\n{\n    if (AlwaysActive)\n    {\n        StartDateAsEpoch = (Date.now() / 1000);\n    }\n    if (!AlwaysActive)\n    {\n        EndDateAsEpoch = (Date.now() / 1000) + 86400;\n    }\n}\n\n// Event Prizes.\n// Some people say eval() is evil. They can go suck it, because eval() is AWESOME.\nvar gettingTopTargets = true;\nvar gettingBottomTargets = true;\nvar TopTargets = [];\nvar BottomTargets = [];\nvar iteration = 0;\n\nwhile(gettingTopTargets)\n{\n    var newTopTarget = { Target: eval(\"Spark.data.scriptData.TopTarget\" + iteration.toString()),\n                         TargetPrizeType: eval(\"Spark.data.scriptData.TopTargetPrize\" + iteration.toString()),\n                         TargetPrizeValue: eval(\"Spark.data.scriptData.TopTargetPrizeValue\" + iteration.toString()) };\n    \n    if (newTopTarget.Target == undefined ||\n        newTopTarget.TargetPrizeType == undefined ||\n        newTopTarget.TargetPrizeValue == undefined)\n    {\n        Spark.getLog().debug(\"Top targets done! Iteration \" + iteration);\n        gettingTopTargets = false;\n        iteration = 0;\n    }\n    else\n    {\n        // We parse the ints here. We can't parse them immediately after the eval because parsing\n        // undefined returns 0. Because it's STUPID.\n        newTopTarget.Target = parseInt(newTopTarget.Target);\n        newTopTarget.TargetPrizeValue = parseInt(newTopTarget.TargetPrizeValue);\n        \n        TopTargets.push(newTopTarget);\n        iteration++;\n        Spark.getLog().debug(\"Getting top targets. Iteration \" + iteration);\n    }\n}\n\nwhile(gettingBottomTargets)\n{\n    var newBottomTarget = { Target: eval(\"Spark.data.scriptData.BottomTarget\" + iteration.toString()),\n                            TargetPrizeType: eval(\"Spark.data.scriptData.BottomTargetPrize\" + iteration.toString()),\n                            TargetPrizeValue: eval(\"Spark.data.scriptData.BottomTargetPrizeValue\" + iteration.toString()) };\n        \n    if (newBottomTarget.Target == undefined ||\n        newBottomTarget.TargetPrizeType == undefined ||\n        newBottomTarget.TargetPrizeValue == undefined)\n    {\n        //Spark.getLog().debug(\"Bottom targets done! Iteration \" + iteration);\n        gettingBottomTargets = false;\n    }\n    else\n    {\n        // Again, ints are parsed here because (parseInt(undefined) != undefined) == \"DUMB\".\n        newBottomTarget.Target = parseInt(newBottomTarget.Target);\n        newBottomTarget.TargetPrizeValue = parseInt(newBottomTarget.TargetPrizeValue);\n        \n        BottomTargets.push(newBottomTarget);\n        iteration++;\n        //Spark.getLog().debug(\"Getting bottom targets. Iteration \" + iteration);\n    }\n}\n\nvar success = eventCollection.update({\"_id\" : {$oid : queriedEventId}}, { $set:\n                                     {\n                                        EventName : Spark.data.scriptData.EventName,\n                                        EventType : Spark.data.scriptData.EventType,\n                                        Track : Spark.data.scriptData.Track,\n                                        PreviousWinner : Spark.data.scriptData.PreviousWinner,\n                                        VisibleIfIneligible : VisibleIfIneligible,\n                                        DebugEvent : DebugEvent,\n                                        Restrictions: Restrictions,\n                                        AlwaysActive : AlwaysActive,\n                                        IsSlam : IsSlam,\n                                        StartDate : StartDateAsEpoch,\n                                        EndDate : EndDateAsEpoch,\n                                        Expired : EventExpired,\n                                        LeagueDuration : LeagueDurationTotalMinutes,\n                                        AssetBundle: Spark.data.scriptData.AssetBundle,\n                                        Sort: parseInt(Spark.data.scriptData.Sort),\n                                        PartitionSize: parseInt(Spark.data.scriptData.PartitionSize),\n                                        \"OverrideEvent\" : false,\n                                        TopPrizes: TopTargets,\n                                        BottomPrizes: BottomTargets\n                                     }\n                                    });\n\nSpark.setScriptData(\"id\", queriedEventId);\nSpark.setScriptData(\"success\", success);","template":"<gs-snippet snippet=\"raceEventsMainMenu\"></gs-snippet>\n<gs-snippet snippet=\"raceEventsExpired\" target=\"ph_raceEventsExpired\"></gs-snippet>\n<gs-snippet snippet=\"displayRaceEvent?eventId={{id}}\" target=\"ph_selectedEventInfo\"></gs-snippet>","groups":[]},"user_query":{"shortCode":"user_query","name":"user_query","scriptData":"","script":"Spark.setScriptData(\"config\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    var form = {};\n    \n    return view(data);\n    \n    function view(data){\n        \n        var config = Spark.getConfig();\n        \n        // raw rules allow setting the view of user query\n        var rawRules = data.rawRules;\n        if(rawRules){\n            form.rawRules = rawRules;\n        }\n        \n        // if there are virtual goods add them to the form\n        var vGoods = config.getVirtualGoods();\n        if(vGoods && vGoods.length > 0){\n            form.vGoods = vGoods;\n        }\n        \n        // if there are achievements add them to the form\n        var achievements = config.getAchievements();\n        if(achievements && achievements.length > 0){\n            form.achievements = achievements;\n        }\n        \n        // if there are segments add them to the form\n        var segments = config.getSegments();\n        if(segments && segments.length > 0){\n            form.segments = segments;\n        }\n        \n        return form;\n    }\n}\n","template":"<gs-query name=\"gsUserQuery\" rules=\"{{config.rawRules}}\">\n    \n    <gs-query-field id=\"_id\" \n                    label=\"ID\" \n                    type=\"oid\"/>\n    \n    <gs-query-field id=\"userName\" \n                    label=\"User Name\" \n                    type='string' \n                    operators=\"equal,begins_with,not_equal\"/>\n    \n    <gs-query-field id=\"displayName\" \n                    label=\"Display Name\" \n                    type='string' \n                    operators=\"equal,begins_with,not_equal\"/>\n    \n    <gs-query-field id=\"location.country\" \n                    label=\"Country\" \n                    type=\"country\"/>\n    \n    <gs-query-field id='lastSeen' \n                    label='Last Seen' \n                    type='date'/>\n    \n    <gs-query-field id=\"pushRegistrations.deviceOS\" \n                    label=\"Push Registration Type\" \n                    type='string'\n                    values='{\"IOS\" : \"IOS\", \"ANDROID\" : \"Android\", \"KINDLE\" : \"Kindle\", \"WP8\" : \"Windows Phone 8\", \"W8\" : \"Windows 8\"}'/>\n\n    <gs-query-field id=\"pushRegistrations.pushId\"\n                    label=\"Push Registration ID\"\n                    type='string'/>\n\n    <gs-query-field id=\"externalIds.AM\"\n                    label=\"Amazon ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.FB\"\n                    label=\"Facebook ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.GP\"\n                    label=\"Google Plus ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.ST\"\n                    label=\"Steam ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n\n    <gs-query-field id=\"externalIds.TW\"\n                    label=\"Twitter ID\"\n                    type='string'\n                    group=\"External IDs\"\n                    operators=\"equal,exists,not_equal,not_exists\"/>\n    \n    {{#if config.vGoods}}\n        {{#each config.vGoods}}\n            <gs-query-field id=\"goods.{{shortCode}}\"\n                            label=\"{{name}}\"\n                            type='integer'\n                            group=\"Virtual Goods\"\n                            operators=\"between,less,less_or_equal,greater,greater_or_equal,exists,not_exists\"/>\n        {{/each}}\n    {{/if}}\n    \n    {{#if config.achievements}}\n        <gs-query-field id=\"achievements\" \n                        label=\"Achievement\"\n                        group=\"Achievements\"\n                        type='string'\n                        values='{ {{#each config.achievements}}\"{{shortCode}}\":\"{{name}}\" {{#unless @last}},{{/unless}} {{/each}} }'/>\n    {{/if}}\n    \n    {{#if config.segments}}\n        {{#each config.segments}}\n            {{#if values}}\n                <gs-query-field id=\"segments.{{shortCode}}\"\n                                label=\"{{name}}\"\n                                type='string'\n                                group=\"Segments\"\n                                values='{ {{#each values}}\"{{shortCode}}\":\"{{name}}\" {{#unless @last}},{{/unless}} {{/each}} }'/>\n            {{/if}}\n        {{/each}}\n    {{/if}}\n    \n</gs-query>","groups":[""]}},"queries":{"InstructionsPerRequest":{"shortCode":"InstructionsPerRequest","name":"InstructionsPerRequest","qbRules":"{\"condition\":\"AND\",\"rules\":[{\"id\":\"@timestamp\",\"field\":\"@timestamp\",\"type\":\"date\",\"input\":\"text\",\"operator\":\"greater\",\"value\":\"2017-01-26\"}]}","esRules":"{\"and\":[{\"range\":{\"@timestamp\":{\"gt\":\"2017-01-26\"}}}]}"},"test":{"shortCode":"test","name":"test"},"total_requests":{"shortCode":"total_requests","name":"total_requests","qbRules":"{\"condition\":\"AND\",\"rules\":[{\"id\":\"@playerId\",\"field\":\"@playerId\",\"type\":\"string\",\"input\":\"text\",\"operator\":\"equal\",\"value\":\"${playerid}\"}]}","esRules":"{\"and\":[{\"term\":{\"@playerId\":\"${playerid}\"}}]}"}}}