{"screens":{"ServerClock":{"shortCode":"ServerClock","name":"Server Clock","html":"<gs-col width=\"7\">\n    <gs-row>\n        <gs-title-block padding=\"10\" title=\"Server Clock\">\n            <gs-placeholder id=\"ph_serverClockMainPage\">\n                <gs-snippet snippet=\"serverClockMainPage?action=enter\">\n                </gs-snippet>\n            </gs-placeholder>\n        </gs-title-block>\n    </gs-row>\n</gs-col>","allowedGroups":""}},"snippets":{"serverClockMainPage":{"template":"<gs-form snippet=\"serverClockMainPage?action=submit\" target=\"ph_serverClockMainPage\">\n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            http://www.epochconverter.com\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Actual Now: {{data.now}} [{{data.nowISO}}]\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Server Clock Now: {{data.serverClockNow}} [{{data.serverClockNowISO}}]\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Server Clock is: {{data.difference}}\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Add a Unix timestamp in milliseconds to set the current 'now' time.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Numbers less than 13 digits will be padded with zeros.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Submit '-1' to reset back to actual Unix time.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"5\">\n            <input name=\"epochNow\" type=\"number\" min=\"-1\" value={{data.epochNow}}/>\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\" width=\"2\">\n            Increase the offset in exact increments using the inputs below.\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col width=\"1\">\n            Days\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetDays\" type=\"number\" value={{data.offsetDays}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Hours\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetHours\" type=\"number\" value={{data.offsetHours}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Minutes\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetMinutes\" type=\"number\" value={{data.offsetMinutes}}/>\n        </gs-col>\n        <gs-col width=\"1\">\n            Seconds\n        </gs-col>\n        <gs-col width=\"1\">\n            <input name=\"offsetSeconds\" type=\"number\" value={{data.offsetSeconds}}/>\n        </gs-col>\n    </gs-row>\n    \n    <gs-row>\n        <gs-col align=\"left\">\n            <gs-submit>Submit</gs-submit>\n        </gs-col>\n\n        {{#if data.submitted}}\n            <gs-col width=\"2\">\n                <gs-alert type=\"success\" message=\"Submitted\">\n            </gs-col>\n        {{/if}}\n        \n        {{#if data.reset}}\n            <gs-col width=\"2\">\n                <gs-alert type=\"success\" message=\"Reset\">\n            <gs-col>\n        {{/if}}\n    </gs-row>\n    \n</gs-form>","script":"requireOnce(\"TimeUtilities\");\nrequireOnce(\"GeneralUtilities\");\n\nSpark.setScriptData(\"data\", SnippetProcessor(Spark.getData().scriptData))\n\nfunction SnippetProcessor(data){\n    \n    data.submitted = false;\n    data.reset = false;\n    var now = Date.now();\n            \n    switch (data.action) {\n        case \"enter\":\n            // Blank\n            break;\n        case \"submit\":\n            if (data.epochNow === \"\") {\n                // Set offset\n                data = SetServerClockOffset(data);\n            }\n            else {\n                // Set 'now'\n                data = SetServerClockNow(now, data);\n            }\n            break;\n    }\n    \n    data.now = now;\n    data.serverClockNow = GetNow();\n    data.nowISO = new Date(now).toISOString();\n    data.serverClockNowISO = new Date(GetNow()).toISOString();\n    var diffDate = new Date(GetNow() - now);\n    data.difference = CalculateDifference(GetNow(), now);\n    \n    function SetServerClockNow(now, data) {\n        var serverClockNow = data.epochNow;\n        \n        if (serverClockNow < 0 || serverClockNow === null || serverClockNow === undefined || \n            serverClockNow === \"\" || isNaN(serverClockNow)) {\n                \n            SetServerTimeOffset(0);\n            data.reset = true;\n            Spark.getLog().info(FormatString(\n                \"SERVER CLOCK: Reset server clock fudge to 0, now is {0} [{1}]\", \n                now,\n                new Date(now).toISOString()));\n        }\n        else {\n            var str = serverClockNow.toString();\n            //Spark.getLog().info(FormatString(\"submitted as str {0}\", str));\n            while(str.length < 13) {\n                str += \"0\";\n            }\n            //Spark.getLog().info(FormatString(\"padded str {0}\", str));\n            serverClockNow = parseInt(str);\n            //Spark.getLog().info(FormatString(\"padded num {0}\", serverClockNow));\n        \n            SetNow(serverClockNow);\n            data.submitted = true;\n            Spark.getLog().info(FormatString(\n                \"SERVER CLOCK: Actual now {0} [{1}], new now {2} [{3}], diff {4}ms\", \n                now,\n                new Date(now).toISOString(),\n                GetNow(),\n                new Date(GetNow()).toISOString(),\n                GetNow() - now));\n        }\n        \n        return data;\n    }\n    \n    function SetServerClockOffset(data) {\n        var offsetDays = data.offsetDays;\n        var offsetHours = data.offsetHours;\n        var offsetMinutes = data.offsetMinutes;\n        var offsetSeconds = data.offsetSeconds;\n        \n        //Spark.getLog().info(FormatString(\"offsetDays {0} offsetHours {1} offsetMinutes {2} offsetSeconds {3}\", \n        //    offsetDays, offsetHours, offsetMinutes, offsetSeconds));\n        \n        var totalOffset = 0;\n        totalOffset += (IsValid(offsetSeconds)  ? offsetSeconds : 0)    * 1000;\n        totalOffset += (IsValid(offsetMinutes)  ? offsetMinutes : 0)    * 1000 * 60;\n        totalOffset += (IsValid(offsetHours)    ? offsetHours   : 0)    * 1000 * 60 * 60;\n        totalOffset += (IsValid(offsetDays)     ? offsetDays    : 0)    * 1000 * 60 * 60 * 24;\n        \n        var currentServerClock = GetNow();\n        SetNow(currentServerClock + totalOffset);\n        \n        data.submitted = true;\n        \n        return data;\n    }\n    \n    function IsValid(number) {\n        return (number !== null && number !== undefined && number !== \"\" && !isNaN(number));\n    }\n    \n    function CalculateDifference(serverClock, unix) {\n        var diffMs = Math.abs(serverClock - unix);\n        var behind = (serverClock < unix);\n        var diffDays = Math.floor(diffMs / 1000 / 60 / 60 / 24).toFixed(0);\n        var diffHours = Math.floor(diffMs / 1000 / 60 / 60).toFixed(0) % 24;\n        var diffMinutes = Math.floor(diffMs / 1000 / 60).toFixed(0) % 60;\n        var diffSeconds = Math.floor(diffMs / 1000).toFixed(0) % 60;\n        return FormatString(\"{0} Day{1}   {2} Hour{3}   {4} Minute{5}   {6} Second{7} {8}\",\n                            diffDays, \n                            (diffDays > 1) ? \"s\" : \"\",\n                            diffHours, \n                            (diffHours > 1) ? \"s\" : \"\",\n                            diffMinutes, \n                            (diffMinutes > 1) ? \"s\" : \"\",\n                            diffSeconds,\n                            (diffSeconds > 1) ? \"s\" : \"\",\n                            (behind) ? \"Behind\" : \"Ahead\");\n    }\n    \n    return data;\n}","shortCode":"serverClockMainPage","name":"Server Clock Main Page","allowedGroups":""}},"queries":{},"displayName":null,"shortCode":null}