var redis = Spark.getRedis();

redis.set("abc", "abc");
redis.append("abc", "abc");
redis.bitcount("abc");
redis.bitcount("abc", 1, 1);
redis.bitop("AND", "abc", ["a"]);
redis.set("abc", 10);
redis.decr("abc");
redis.decrBy("abc", 1);
redis.del(["abc"]);
redis.exists("abc");
redis.expire("abc", 1);
redis.expireAt("abc", 1);
redis.get("abc");
redis.getbit("abc", 1);
redis.getrange("abc", 1, 1);
redis.hdel("abc", ["abc"]);
redis.hexists("abc", "abc");
redis.hget("abc", "abc");
redis.hgetAll("abc");
redis.hincrBy("abc", "abc", 1);
redis.hincrByFloat("abc", "abc", 0.2);
redis.hkeys("abc");
redis.hlen("abc");
redis.hmget("abc", ["abc"]);
redis.hmset("abc", {"a":"b"});
redis.hset("abc", "abc", "abc");
redis.hsetnx("abc", "abc", "abc");
redis.hvals("abc");
redis.set("abc", "10");
redis.incr("abc");
redis.incrBy("abc", 1);
redis.incrByFloat("abc", 0.2);
redis.keys("abc");
redis.rpush("bbb", "sadas");
redis.lindex("bbb", 1);
redis.linsert("bbb", "BEFORE", "abc", "abc");
redis.llen("bbb");
redis.lpop("bbb");
redis.lpush("bbb", "asdsad");
redis.lpushx("bbb", "sasada");
redis.lrange("bbb", 1, 1);
redis.lrem("bbb", 1, "abc");
redis.lset("bbb", 1, "abc");
redis.ltrim("bbb", 1, 1);
redis.mget(["a","b"]);
redis.mset(["a","b"]);
redis.msetnx(["abc"]);
redis.persist("abc");
redis.pexpire("abc", 1);
redis.pexpireAt("abc", 1);
redis.psetex("abc", 1, "abc");
redis.pttl("abc");
redis.set("aaa", "abc");
redis.set("dog", "woof");
redis.rename("dog", "cat");
redis.renamenx("aaa", "abc");
redis.rpush("ccc", "sadas");
redis.rpop("ccc");
redis.rpoplpush("ccc", "ccc");
redis.rpush("ccc", ["a"]);
redis.rpushx("ccc", ["a"]);
redis.sadd("ddd", "aaa");
redis.scard("ddd");
redis.sdiff(["ddd", "ddd"]);
redis.sdiffstore("eee", ["ddd", "ddd"]);
redis.set("abc", "abc");
redis.set("abc", "abc", "NX");
redis.set("abc", "abc", "NX", "EX", 2147483648); //long
redis.set("abc", "abc", "NX", "EX", 1);
redis.getSet("abc", "abc");
redis.setbit("abc", 1, true);
redis.setex("abc", 1, "abc");
redis.setnx("abc", "abc");
redis.setrange("abc", 1, "abc");
redis.sinter(["ddd", "ddd"]);
redis.sinterstore("eee", ["ddd", "ddd"]);
redis.sismember("ddd", "abc");
redis.smembers("ddd");
redis.smove("ddd", "ddd", "ddd");
redis.set("fff", "1");
redis.spop("ddd");
redis.srandmember("ddd");
redis.srandmember("ddd", 1);
redis.srem("ddd", ["a","b"]);
redis.strlen("abc");
redis.substr("abc", 1, 1);
redis.sunion(["ddd", "ddd"]);
redis.sunionstore("abc", ["ddd", "ddd"]);
redis.ttl("abc");
redis.type("abc");
redis.del("ggg");
redis.zadd("ggg", 1.0, "1.0");
redis.sort("ggg");
redis.zcard("abc");
redis.zcount("abc", 1.0, 1.0);
redis.zcount("abc", "1", "2");
redis.zincrby("abc", 1.0, "abc");
redis.zinterstore("abc", ["abc"]);
redis.zrange("abc", 1, 1);
redis.zrangeByScore("abc", "4", "5", 1, 1);
redis.zrangeByScore("abc", "1", "2");
redis.zrangeByScore("abc", 1.0, 1.0, 1, 1);
redis.zrangeByScore("abc", 1.0, 1.0);
redis.zrangeByScoreWithScores("abc", "1", "2");
redis.zrangeByScoreWithScores("abc", "1.4", "4.5", 1, 1);
redis.zrangeByScoreWithScores("abc", "1", "4", 1, 1);
redis.zrangeByScoreWithScores("abc", 2147483648, 2147483648);  // long
redis.zrangeWithScores("abc", 1.0, 2.0);
redis.zrank("abc", "abc");
redis.zrem("abc", ["abc"]);
redis.zremrangeByRank("abc", 1, 1);
redis.zremrangeByScore("abc", 1.0, 1.0);
redis.zremrangeByScore("abc", "1", "1");
redis.zrevrange("abc", 1, 1);
redis.zrevrangeByScore("abc", 2.0, 2.0, 1, 1);
redis.zrevrangeByScore("abc", 2.0, 2.0);
redis.zrevrangeByScore("abc", "1", "1");
redis.zrevrangeByScoreWithScores("abc", 1.0, 1.0);
redis.zrevrangeByScoreWithScores("abc",1.0, 1.0, 1, 1);
redis.zrevrangeByScoreWithScores("abc", "1", "2", 1, 1);
redis.zrevrangeByScoreWithScores("abc", "1", "2");
redis.zrevrangeWithScores("abc", 1, 1);
redis.zrevrank("abc", "abc");
redis.zscore("abc", "abc");
redis.zunionstore("abc", ["abc"]);